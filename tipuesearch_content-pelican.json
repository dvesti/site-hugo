{"pages":[{"title":"Добавили комментирование","text":"Установил на блоге Комментирование — Utterances . В теме Elegant почти всё уже настроено. Повозиться надо, но немного. При настройке пользовался статьями этой и этой По умолчанию — комментарии ко всем статьям отключены, кроме тех, которые попадают в исключение. Т.е. я сам в шапке статьи указываю, что ограничения для неё не работают: utterances_filter: off Здесь, комментарии, конечно же, включу :) По уже хорошей традиции, допишу статью позже, как это я уже неоднократно делал","tags":"Blog","url":"https://dvesti.github.io/Pelican/2020/08/03/dobableny-kommentarii-utterances/","loc":"https://dvesti.github.io/Pelican/2020/08/03/dobableny-kommentarii-utterances/"},{"title":"Поиск на русском языке — сделан?!","text":"Идёт процесс отладки! P.S3. Поиск опять сломался: очень уж он нежный. Переделывал файлы и даже поиск локального сайта перестал искать. Пришлось всё начинать с Нуля . Закачал тему Elegant 1.3 (за ~~1913~~ 2013 год). И, настроив поиск, обновился до версии 5.3 . Локально работает очень хорошо. А на сервере опять кочевряжется . Какой-то кэш мешает. Надо разбираться… Демо-поиск P.S4. Сделал демо-поиск на отдельной страничке ( 404 ). Пока им можно пользоваться: он работает ! Поиск работает! Основной Поиск в верхнем меню работает штатно (русский + english) Наконец-то сделал поиск по сайту на русском языке. Сайт создан на Pelican . Если коротко, то взял Поиск с версии 1.3 , потом добавил всё остальное. Возможно, придётся поменять некоторые скрипты в папке tipuesearch Желающие разобраться могут посмотреть файлы в репозитории (ветка gh-pages ) P.S. Впрочем, нет основных файлов в репозитории. Вот так и я по крупицам собирал в Интернете информацию. Теперь сайт работоспособный — подумаю об обратной связи: попробую сделать комментарии. Возможно, что и перееду на свой поддомен: как дело пойдёт… P.S2. Необходимо вдогонку отметить, что и сам плагин tipue_search должен быть старым, чтоб генерил в формате JSON <== это важно! ) Чтобы два раза не вставать, вот код файла blog-plugins\\pelican-plugins\\tipue_search\\tipue_search.py # -*- coding: utf-8 -*- \"\"\" Tipue Search ============ A Pelican plugin to serialize generated HTML to JSON that can be used by jQuery plugin - Tipue Search. Copyright (c) Talha Mansoor \"\"\" from __future__ import unicode_literals import os.path import json from bs4 import BeautifulSoup from codecs import open try : from urlparse import urljoin except ImportError : from urllib.parse import urljoin from pelican import signals class Tipue_Search_JSON_Generator ( object ): def __init__ ( self , context , settings , path , theme , output_path , * null ): self . output_path = output_path self . context = context self . siteurl = settings . get ( 'SITEURL' ) self . tpages = settings . get ( 'TEMPLATE_PAGES' ) self . output_path = output_path self . json_nodes = [] def create_json_node ( self , page ): if getattr ( page , 'status' , 'published' ) != 'published' : return soup_title = BeautifulSoup ( page . title . replace ( '&nbsp;' , ' ' ), 'html.parser' ) page_title = soup_title . get_text ( ' ' , strip = True ) . replace ( '\"' , '\"' ) . replace ( '\"' , '\"' ) . replace ( ''' , \"'\" ) . replace ( '&#94;' , '&#94;' ) soup_text = BeautifulSoup ( page . content , 'html.parser' ) page_text = soup_text . get_text ( ' ' , strip = True ) . replace ( '\"' , '\"' ) . replace ( '\"' , '\"' ) . replace ( ''' , \"'\" ) . replace ( ' ' , ' ' ) . replace ( '&#94;' , '&#94;' ) page_text = ' ' . join ( page_text . split ()) if getattr ( page , 'category' , 'None' ) == 'None' : page_category = '' else : page_category = page . category . name page_url = self . siteurl + '/' + page . url node = { 'title' : page_title , 'text' : page_text , 'tags' : page_category , 'url' : page_url , 'loc' : page_url } # changed from 'url' following http://blog.siphos.be/2015/08/updates-on-my-pelican-adventure/ (an update to Pelican made it not work, because the update (e.g., in the theme folder, static/tipuesearch/tipuesearch.js is looking for the 'loc' attribute. self . json_nodes . append ( node ) def create_tpage_node ( self , srclink ): srcfile = open ( os . path . join ( self . output_path , self . tpages [ srclink ]), encoding = 'utf-8' ) soup = BeautifulSoup ( srcfile , 'html.parser' ) page_text = soup . get_text () # What happens if there is not a title. if soup . title is not None : page_title = soup . title . string else : page_title = '' # Should set default category? page_category = '' page_url = urljoin ( self . siteurl , self . tpages [ srclink ]) node = { 'title' : page_title , 'text' : page_text , 'tags' : page_category , 'url' : page_url , 'loc' : page_url } # changed from 'url' following http://blog.siphos.be/2015/08/updates-on-my-pelican-adventure/ (an update to Pelican made it not work, because the update (e.g., in the theme folder, static/tipuesearch/tipuesearch.js is looking for the 'loc' attribute. - commit 2dcdca8c8d self . json_nodes . append ( node ) def generate_output ( self , writer ): path = os . path . join ( self . output_path , 'tipuesearch_content.json' ) pages = self . context [ 'pages' ] + self . context [ 'articles' ] for article in self . context [ 'articles' ]: pages += article . translations for srclink in self . tpages : self . create_tpage_node ( srclink ) for page in pages : self . create_json_node ( page ) root_node = { 'pages' : self . json_nodes } with open ( path , 'w' , encoding = 'utf-8' ) as fd : json . dump ( root_node , fd , separators = ( ',' , ':' ), ensure_ascii = False ) def get_generators ( generators ): return Tipue_Search_JSON_Generator def register (): signals . get_generators . connect ( get_generators )","tags":"Blog","url":"https://dvesti.github.io/Pelican/2020/07/31/sdelal-poisk-Pelican/","loc":"https://dvesti.github.io/Pelican/2020/07/31/sdelal-poisk-Pelican/"},{"title":"Пример стандартной разметки Markdown","text":"Стандарт тот ещё – As I started writing my articles for my blog, I realized I needed something. To help me write articles using this flavor of Markdown 1 , I needed my own cheat sheet. My hope is that it provides clear guidance on which aspects of the various forms of Markdown worked for me, and which didn't. Introduction I am writing articles and pages on Pelican 4.0.1 2 using the Elegant 3 theme, therefore I want to make sure I have a cheat sheet that is specific to this dialect of Markdown. The base Markdown used for Pelican uses the Python Markdown Package which (with 3 exceptions) follows John Gruber's Markdown definition very literally. Pelican configuration also supports providing Markdown with additional configuration that enables other features. Those features are documented separately in the next page . The format of this cheat sheet is simple. Each section is separated from the next with a horizontal break and the name of the section. Any notes regarding that section are placed at the top of the section in point form, to ensure they are brief. Then a Code Block section is used to show the literal code used to produce the effects that are presented right after the code block. Horizontal Break A horizontal break occurs after 3 or more hyphens. --- A horizontal break occurs after 3 or more hyphens. Headings # Heading Level 1 ## Heading Level 2 ### Heading Level 3 Heading Level 1 Heading Level 2 Heading Level 3 Text Emphasis two spaces at the end of a line will be equivalent to <br/> This text is \\*\\*bold\\*\\* and this text is also \\_\\_bold\\_\\_. This text is \\*italic\\* and this text is also \\_italic\\_. This text is \\*\\*\\_italic and bold\\_\\*\\*, but no two spaces at end. Single \\`\\`\\`line\\`\\`\\` block. Inline \\`code\\` has \\`\\`\\`back-ticks like this \\` around\\`\\`\\` it. This text is bold and this text is also bold . This text is italic and this text is also italic . This text is italic and bold , but no two spaces at end. Single line block. Inline code has back-ticks like this ` around it. Numbered lists to maintain the indentation, place 4 spaces at the start of the line 1. One New para. Blah 2. Two - unordered - list 3. Three 1. ordered 2. list - unordered - list 3. items One New para. Blah Two unordered list Three ordered list unordered list items Bulleted List to maintain the indentation, place 4 spaces at the start of the line - This is a list item with two paragraphs. This is the second paragraph in the list item. You're only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. - Another item in the same list. - Bulleted item - Bulleted item This is a list item with two paragraphs. This is the second paragraph in the list item. You're only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Another item in the same list. Bulleted item Bulleted item Block quote > This is the first paragraph of a blockquote with two paragraphs. > Lorem ipsum dolor sit amet, > consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. > Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. > > This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. > > This is the first level of quoting. > > > This is nested blockquote. > > Back to the first level. This is the first paragraph of a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. This is the first level of quoting. This is nested blockquote. Back to the first level. Code Block line numbers can be added via extensions ```text Make things only as complex as they need to be. ``` Make things only as complex as they need to be. ```Python # Blogroll LINKS = ( ('Pelican', 'Pelican', 'http://getpelican.com/'), ) ``` # Blogroll LINKS = ( ( 'Pelican' , 'Pelican' , 'http://getpelican.com/' ), ) Tables colons can be used to align columns. | Column1 | Column 2 | Column 3 |---|---|---| | Value 1 | Value 2 | Value 3 | | Value 4 | Value 5 | Value 6 | | Value 7 | Value 8 | Value 9 | | Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | Column1 Column 2 Column 3 Value 1 Value 2 Value 3 Value 4 Value 5 Value 6 Value 7 Value 8 Value 9 Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 Links Local Links {filename} tag indicates location in the content folder. [ About Page\\ ]( {filename}/pages/landing-page-about-hidden.md ) About Page Remote Links proper URL indicates a remote website [ Python Package Index\\ ]( https://pypi.org ) Python Package Index Download Links download links are not natively supported in Markdown must explicitly create HTML text inline to achieve that Creating a link to a file to download, not display, is not natively supported in markdown. [ Pelican Brag Document (display)\\ ]( {static}/images/markdown-1/pelican.txt ) <a href=\"{static}/images/pelican.txt\" download>Pelican Brag Document (download)</a> Pelican Brag Document (display) Pelican Brag Document (download) Images {filename} tag indicates location in the content folder. ![ python logo ]( https://jackdewinter.github.io/images/markdown-1/python_icon.png ) Markdown allows for HTML pages to be written using a simple text editor with no knowledge of HTML . ↩ Pelican is a Static Site Generator written in Python. ↩ The Elegant theme's repository is here ↩","tags":"Website","url":"https://dvesti.github.io/Pelican/2020/07/04/standard-markdown-examples/","loc":"https://dvesti.github.io/Pelican/2020/07/04/standard-markdown-examples/"},{"title":"Version 5.3.0","text":"5.3.0 (2020-02-05) Bug Fixes gallery: change gallery grid to fit on smaller screens ( d4c1c50 ) gallery: replace photoswipe-gallery with elegant-gallery ( 17a05da ) Features comments: add support for CommentBox ( c56e61e )","tags":"Release Notes","url":"https://dvesti.github.io/Pelican/2020/02/06/version-530/","loc":"https://dvesti.github.io/Pelican/2020/02/06/version-530/"},{"title":"Комментарии — включить CommentBox","text":"You can use CommentBox for comments. You have to set COMMENTBOX_PROJECT to your CommentBox project ID . That's it. Elegant will take care of the rest. You can see a working example of CommentBox comments in this article. Show CommentBox comments by default Just set COMMENTBOX_PROJECT variable. Hide CommentBox comments by default Unset COMMENTBOX_PROJECT variable. This is the default setting. Hide CommentBox comments by default. Show on Selected Set COMMENTBOX_PROJECT Set COMMENTBOX_FILTER to True This will hide CommentBox form on all pages. Now to show CommentBox form on selected posts, in article metadata set commentbox_filter : off Show CommentBox comments by default. Hide on Selected Set COMMENTBOX_PROJECT Remove COMMENTBOX_FILTER or set it to False which is its default value This will hide CommentBox form on all pages. Now to hide CommentBox form on selected posts, in article metadata set commentbox_filter : on","tags":"Connecting With Your Readers","url":"https://dvesti.github.io/Pelican/2020/02/05/enable-commentbox-comments/","loc":"https://dvesti.github.io/Pelican/2020/02/05/enable-commentbox-comments/"},{"title":"Version 5.2.1","text":"5.2.1 (2020-02-04) Bug Fixes blockquote: regression introduced in last version ( 2aace21 )","tags":"Release Notes","url":"https://dvesti.github.io/Pelican/2020/02/05/version-521/","loc":"https://dvesti.github.io/Pelican/2020/02/05/version-521/"},{"title":"Version 5.2.0","text":"5.2.0 (2020-02-03) Bug Fixes regression introduced due to cache busting ( b953a38 ) archives: at smaller screen layout does not make the best use of available space ( a289e9d ) syntax: code blocks with line numbers do not have the correct border radius ( 3a34a3e ) syntax: improve the font size and height of download button ( 07595b3 ) typography: fix font size and style of TOC ( 2d597ab ), closes #509 Categories and Tags pages do not have space below the header ( d78f4e5 ) remove invalid CSS rule ( 368cb2c ) use consistent color for border ( c85b7b8 ) use darker color for the site name ( 19f37ca ) article: use loclate_date attribute instead of hardcoding the date format ( 1da552c ), closes #552 bootstrap: WIP . add Bootstrapv2.3.2 sources file to the project ( 43ee8eb ), closes #429 seo: regression introduced in PR #556 ( 28bcb85 ), closes #505 typography: about me and my projects heading is not on one line ( 6a7989c ) typography: font size of superscript number in categories and tags page ( d0a7162 ) typography: override Bootstrap base font ( f6a83a6 ), closes #429 typography: top menu bar does not have correct height ( d30ce82 ) typography: use consistent font and color for project list ( 477a467 ) typography: use consistent font in the footer ( eeb0e30 ) Features add support cache busting ( cde0dc5 ) categories: change background color of uncollapsed Category ( 6cc11b8 ) gallery: add support for PhotoSwipe image gallery using raw HTML ( ad1bcea ), closes #567 js: combine and minify all JS files into one to improve load speed ( f5047d4 ) search: improve search results page look ( 73fa743 ), closes #573 #275 search: replace tipue_search with lunr.js ( 9d60af1 ), closes #275 SEO : Add header and documentation for Claiming Website on Yandex ( 2bb691d ) SEO : add SEO and SMO meta keywords in site's home page ( c5be0eb ) sharing: Enable customizing the sharing links ( f3e262f ) syntax: add copy to clipboard button for every code snippet ( 6f73317 ), closes #574 #525 syntax: add support for highlighting lines in code snippets ( ba2de8c ), closes #520 syntax: add support for liquid_tags.include_code plugin ( 0550a3a ), closes #518 syntax: use Gruvbox syntax highlighting theme ( 0b50ab1 ) typography: use consistent fonts ( 8b7a8bd ), closes #429 typography: use consistent style for timestamps in tags, categories and archives pages ( a421dcd ) typography: use dns-prefetch and preconnect to improve font load time ( e4bd582 ) typography: use responsive fonts ( 39acdbf )","tags":"Release Notes","url":"https://dvesti.github.io/Pelican/2020/02/03/version-520/","loc":"https://dvesti.github.io/Pelican/2020/02/03/version-520/"},{"title":"Копируем код в буфер обмена","text":"Elegant is the only Pelican theme that comes with a \"Copy To Clipboard\" button on every code snippet. Try it out fmt . Println ( \"Hello Clipboard\" ) We use excellent JavaScript library, clipboard.js for this feature. Your readers do not need Flash for this feature.","tags":"Components","url":"https://dvesti.github.io/Pelican/2020/02/03/code-snippets-copy-to-clipboard/","loc":"https://dvesti.github.io/Pelican/2020/02/03/code-snippets-copy-to-clipboard/"},{"title":"Подсветка кода","text":"Python-Markdown uses CodeHilite extension for syntax highlighting. This extension lets you highlight specific lines in your code snippets. You can read the instructions here . Elegant supports this feature. # This line is emphasized # This line isn't # This line is emphasized Another example, < div class = \"elegant-gallery\" itemscope itemtype = \"http://schema.org/ImageGallery\" > </ div > Another example, 1 2 3 # Code goes here .. # This line is emphasized # This line isn't","tags":"Components","url":"https://dvesti.github.io/Pelican/2020/02/02/code-snippets-highlight-lines/","loc":"https://dvesti.github.io/Pelican/2020/02/02/code-snippets-highlight-lines/"},{"title":"Фотогалерея — используем PhotoSwipe","text":"Elegant integrates with PhotoSwipe to create gallery of images. Here is an example. Placeholder image from Unsplash You can write anything in the caption You can use HTML Unsplash Another sample image Last sample image To use it, you will have to add raw HTML in your markdown file. Here is the require HTML with two images in it. < div class = \"elegant-gallery\" itemscope itemtype = \"http://schema.org/ImageGallery\" > < figure itemprop = \"associatedMedia\" itemscope itemtype = \"http://schema.org/ImageObject\" > < a href = \"https://i.picsum.photos/id/1019/5472/3648.jpg\" itemprop = \"contentUrl\" data-size = \"5472x3648\" > < img src = \"https://i.picsum.photos/id/1019/100/100.jpg\" itemprop = \"thumbnail\" alt = \"Image description\" /> </ a > < figcaption itemprop = \"caption description\" > Placeholder image from Unsplash </ figcaption > </ figure > < figure itemprop = \"associatedMedia\" itemscope itemtype = \"http://schema.org/ImageObject\" > < a href = \"https://i.picsum.photos/id/101/2621/1747.jpg\" itemprop = \"contentUrl\" data-size = \"2621x1747\" > < img src = \"https://i.picsum.photos/id/101/100/100.jpg\" itemprop = \"thumbnail\" alt = \"Image description\" /> </ a > < figcaption itemprop = \"caption description\" > You can write anything in the caption </ figcaption > </ figure > </ div > Placeholder image from Unsplash You can write anything in the caption Define a div < div class = \"elegant-gallery\" itemscope itemtype = \"http://schema.org/ImageGallery\" ></ div > Notice the class, elegant-gallery . You should not change it. Define figure Place it inside the div defined above. < figure itemprop = \"associatedMedia\" itemscope itemtype = \"http://schema.org/ImageObject\" ></ figure > Link to your image Place it inside the figure . < a href = \"https://i.picsum.photos/id/1019/5472/3648.jpg\" itemprop = \"contentUrl\" data-size = \"5472x3648\" > </ a > data-size is important. It should have the correct width and height of the image. Add the thumbnail Create a thumbnail of your image and then place link to it inside the <a> you create above. < img src = \"https://i.picsum.photos/id/1019/100/100.jpg\" itemprop = \"thumbnail\" alt = \"Image description\" /> This is it. Your gallery should start working. Define caption You can also define the caption of your image using figcaption . You must place it inside the figure tag. <figcaption itemprop= \"caption description\" > You can write anything in the caption </figcaption> You can use HTML inside the figcaption . Developer Required Ideally, a Pelican plugin should generate this raw HTML , but at the time of writing, such a plugin does not exist. If you create such a plugin, then let us know . It will be a big help to thousands of Pelican users. The plugin, should create a thumbnail of the image, read size of the image, and then generate the required raw HTML , which then gets inserted into article.content or page.content . The user should be able to insert more than one galleries in the article, at any place. (Currently, the Photos plugin forces themes to append gallery in the bottom of the article.) Finally, let the user define gallery images and their captions inside an article in a friendly and easy way. Like, as YAML or JSON inside the markdown.","tags":"Components","url":"https://dvesti.github.io/Pelican/2020/02/02/photoswipe-gallery-using-raw-html/","loc":"https://dvesti.github.io/Pelican/2020/02/02/photoswipe-gallery-using-raw-html/"},{"title":"Много-страничная статья — Часть 2","text":"And Now Back to Your Regular Programming To show how this feature works, with a concrete example, this article was purposefully split into two parts. The first part of this article can be accessed by looking under the section labelled Article Series on the right toolbar. This Part 1 article is displayed using normal text, while the following Part 2 article is shown in an italicized text. Click on the Part 1 article text on the right toolbar to go to the previous article. Article Metadata Once the configuration for Series is enabled in the configuration file, using this feature for a given set of articles requires that the article contains the series metadata field value. The text assigned to the series metadata field is the title of the series. When the page is created, Pelican provides Elegant with a list of all pages that have the same value for the series metadata field. By default, Elegant sorts that list according to the publish date for each article. The titles for those pages is then displayed in sorted order, with the current page presented in italics and the other pages presented as a link to those pages. series : Maximizing Elegant series_index : 2 If there is a reason to override the ordering of the articles, the series_index metadata field is required. It is recommended that you use the part number you want displayed for the article as the value to assign to the field.","tags":"Supported Plugins","url":"https://dvesti.github.io/Pelican/2019/12/08/how-to-use-series-plugin-2/","loc":"https://dvesti.github.io/Pelican/2019/12/08/how-to-use-series-plugin-2/"},{"title":"Много-страничная статья — Часть 1","text":"When writing articles about certain topics, it is advantageous to split a single article into multiple articles. Without splitting the article up, the author would be forced to cram all of the content into a denser and much longer article, reducing its effectiveness and readability in the process. Splitting the article allows the author to focus on a specific concept of the larger article, thereby increasing the overall appearance and readability. Elegant provides the ability to present a view of the articles in the series in the middle of the right sidebar. This section starts with the name of the series, followed by one bullet point for each of the articles in the series. The text for the article is prefaced with \"Part N: \" (where N is the index of the article) and then the title for the article. To make navigation easier, the current article is presented in italics, with the other articles being presented as links to their respective articles. Here is an example of what the Series section may look like: Configuration To enable the reading time for your articles, you need to add series to the PLUGINS configuration variable in your Pelican configuration. PLUGINS = [ 'series' ] In addition, the SERIES_TITLE configuration variable can be set to specify the title used for the Series section, regardless of the series. SERIES_TITLE = \"More In This Series\" To Be Continued To show how this feature works, with a concrete example, this article was purposefully split into two parts. The second part of this article can be accessed by looking under the section labelled Article Series on the right toolbar. This Part 1 article is displayed using italicized text, while the following Part 2 article is shown using normal text. Click on the Part 2 article on the right toolbar to go to the next article.","tags":"Supported Plugins","url":"https://dvesti.github.io/Pelican/2019/12/07/how-to-use-series-plugin/","loc":"https://dvesti.github.io/Pelican/2019/12/07/how-to-use-series-plugin/"},{"title":"Обновляем тему Elegant","text":"Once you have determined that you want to update to the latest release of Elegant, the process is usually quite simple. There are wo main ways to get the Elegant theme: as a standalone repository and as part of the Pelican-Themes repository. Via the Pelican-Themes Repository If you installed the Elegant theme as part of the Pelican-Themes repository, all of the themes available in that project will be located at a level one down from the directory where you installed the repository into. For example, if you installed the repository with the following command: git clone --recursive https://github.com/getpelican/pelican-themes ../blog-themes cd ../blog-themes git submodule update --init elegant git submodule update --remote elegant it installed every theme known to the project in the current directory where the command was executed from. Along with (at last count) 125 other themes, the Elegant theme is located under the elegant directory. Replacing With the Pelican-Themes Repository The Elegant theme is included into the Pelican-Themes project by using a git concept called sub-modules. Because of the ways that sub-modules work, if you want to update one sub-module in a project, it is almost always desired to remove the sub-module that you want to update and clone it in again. This is accomplished with the following script: rm -rf ../blog-themes/elegant git clone --jobs 8 --recurse-submodules --depth 1 --shallow-submodules https://github.com/Pelican-Elegant/elegant.git ../blog-themes/elegant Assuming the blog-themes directory is at the same level as your Pelican directory, the script removes the Elegant directory under the blog-themes directory, only to recreate it using the git clone command on the next line. Note that this also has the benefit of updating your Elegant theme to the latest theme based on Elegant's repository, instead of relying on the Pelican-Themes repository. There is often a lag between when a release is made in Elegant's repository and when it is available \"automatically\" through the Pelican-Themes repository. By using this method of updating the repository, you keep the directory structure of the Pelican-Themes repository while making sure you have the latest release of Elegant. Via a Standalone Repository If you installed the Elegant theme as a standalone repository, you most likely followed directions like the following to clone the Elegant repository: mkdir ../blog-theme/Elegant git clone https://github.com/Pelican-Elegant/elegant ../blog-theme/Elegant For this example, the assumption is that the Pelican directory where your website is stored is at the same level as the blog-theme directory. As such, the ../blog-theme part of the path gets us to the theme part of the directory tree. It is possible to just leave the path at that, but it is recommended to add the /Elegant at the end as a reminder of the repository name. If the Elegant theme was installed in this manner, you can either update your local repository or recreate your repository as noted in the following two sections. Updating a Standalone Theme The master branch of Elegant's Git repository always contains the latest release. To update to that release, go into the Elegant theme directory ( ../blog-theme/Elegant from the example above), and enter the following command. git pull origin master Note that this is the most effective way of updating your standalone repository if you have not made any changes to the the theme. If you have made some changes, you may be required to merge the changes in your local repository with any changes in the release version you pulled down with this command. Recreate a Standalone Theme If you are lucky, you will not reach a time where you believe, even a tiny bit, that you have messed up the contents of your theme repository. If you have made any changes to the base Elegant theme, it is inevitable that at some point you will need to reset the repository to a known good state. Assuming that the repository is in the directory ../blog-theme/Elegant , per the example above, executing the following command: rmdir -rf ../blog-theme/Elegant will remove the entire theme from your local system. Once this is done, you can follow the clone directions in the example at the top of this section on standalone repositories to restore the Elegant theme directory to the same state as Elegant's master branch on GitHub. Using The Tasks Framework Windows Users The tasks framework is set up with commands for a Linux system. If you intend to use the tasks framework on your Windows system, a number of changes will be required. If you feel like helping us out with this, we will gladly accept a PR to address this! If you are using the Python invoke framework, then this work is already done for you by using the theme_sync task in documentation/tasks.py file. The invoke package can be installed in the usual manner: pip install invoke Once installed, typing invoke theme_sync will execute that task as defined in the file tasks.py as follows: @task def theme_sync ( c ): \"\"\"Make a fresh shallow copy of pelican-elegant theme\"\"\" c . run ( \"rm -rf themes\" ) c . run ( \"git clone --jobs 8 --recurse-submodules --depth 1 --shallow-submodules https://github.com/Pelican-Elegant/elegant.git themes/elegant\" ) Note that this script makes a couple of assumptions about where you are invoking the task from and where you have your themes stored. If you are okay with that, give it a try!","tags":"101 — Quick Start","url":"https://dvesti.github.io/Pelican/2019/12/06/updating-elegant-to-the-latest-release/","loc":"https://dvesti.github.io/Pelican/2019/12/06/updating-elegant-to-the-latest-release/"},{"title":"Version 5.1.0","text":"5.1.0 (2019-12-05) Bug Fixes applause: applause_button tag does not auto close ( d37e691 ) typography: make headings align to the left instead of justify ( 101285e ) Features applause: add option to set applause_button_id ( 8eda9a4 ) applause: add support for applause button ( e4872fd ), closes #532 applause: simplify filter option ( 9f8b60f )","tags":"Release Notes","url":"https://dvesti.github.io/Pelican/2019/12/05/version-510/","loc":"https://dvesti.github.io/Pelican/2019/12/05/version-510/"},{"title":"Applause Button","text":"Elegant supports Applause Button . How To Enable Applause Button You can enable and disable the button site wide or on specific articles. Show Applause Button in all articles Set APPLAUSE_BUTTON variable to True in your Pelican configuration. Hide Applause Button in all articles Set APPLAUSE_BUTTON variable to False in your Pelican configuration. This is the default. Show Applause Button in all articles. Hide on selected Set APPLAUSE_BUTTON variable to True in your Pelican configuration. And on specific articles set applause_button : off Hide Applause Button in all articles. Show on selected Set APPLAUSE_BUTTON variable to False in your Pelican configuration. And on specific articles set applause_button : on Extra Configuration By default Elegant passes the article URL as identifier to the Applause Button server. But you can also set applause_button_id in your article metadata which is given preference over the article URL .","tags":"Connecting With Your Readers","url":"https://dvesti.github.io/Pelican/2019/12/05/applause-button/","loc":"https://dvesti.github.io/Pelican/2019/12/05/applause-button/"},{"title":"Getting Notified About New Releases","text":"Unlike a number of themes that exist for Pelican, the Elegant theme is currently under active development. The immediate benefit of this for you is that Elegant supports recent technologies/services such as Utterances for comments and the Applause button for quick and simple user feedback. The other main benefits are that any requests, be they bug reports or feature requests, are logged in the project's Issues database. These issues are actively going through triage, being worked on by the Elegant community, and being addressed in ongoing releases of Elegant. In addition, the roadmap let's you see what the Elegant team is working on, allowing you to decide if you want to contribute and help bring some feature of the theme to life! To give you the control to decide whether to update your website and benefit from the latest version of Elegant, we offer two automated ways to find out about new releases. Subscribe to the email Newsletter Each of the article pages on this Elegant documentation website contain a section at the bottom of the right sidebar titled Get New Release Alert . By entering your email address in the box below and clicking on the Notify Me button, you are signing up for our newsletter. This simple newsletter uses Elegant's support for MailChimp , and is only used to notify people when there are new version of Elegant available. Subscribe to the RSS feed for the Documentation Site If you have any reservations about actively subscribing to a newsletter through a mailing list, you can passively subscribe to receive updates notices for Elegant by subscribing to the RSS feed for this website using your browser. By selecting the RSS Feed icon under Stay In Touch , your browser will handle the information according to any plugins present in your browser. Once this link is visible, simply copy it into your favorite RSS reader and you will be notified by that RSS reader when there is a new release.","tags":"101 — Quick Start","url":"https://dvesti.github.io/Pelican/2019/12/05/getting-notified-about-new-releases/","loc":"https://dvesti.github.io/Pelican/2019/12/05/getting-notified-about-new-releases/"},{"title":"Version 5.0.1","text":"5.0.1 (2019-12-04) Bug Fixes blockquote: close quote is not aligned properly ( 80a85c7 ) typography: remove unit from line height ( 10286a1 )","tags":"Release Notes","url":"https://dvesti.github.io/Pelican/2019/12/04/version-501/","loc":"https://dvesti.github.io/Pelican/2019/12/04/version-501/"},{"title":"Version 5.0.0","text":"5.0.0 (2019-12-02) Bug Fixes css: linter warning ( a5f5c81 ) page: social profiles appear in the sidebar ( c17077c ), closes #534 social: reduce icon size in the sidebar ( 4e0dc41 ), closes #490 typography: adjust heading sizes and set small font-style to italic ( d3bbf04 ) typography: remove border from headings in archive page ( 817bea8 ) Features blockquote: improve blockquote look ( 068d50a ) border: change border radius of tags and code blocks to match rest of the theme ( 5d0285f ), closes #521 border: have consistent border radius ( 7307467 ), closes #521 code-block: minor refine code-block style ( 2ba2232 ) css: use PostCSS for processing CSS files ( 2b88865 ), closes #354 links: add new style and improve existing style for hyperlinks ( 87fd3d3 ), closes #533 #519 permalink: improve permalink look ( 8059ca8 ) security: use rel=\"noopener noreferrer\" with all target=\"_blank\" ( 4c843e9 ) typography: code inside heading is consistently 80% of the size ( 7180b49 ), closes #508 typography: headings sizes and other properties are consistent ( afa99ab ), closes #508 #521 typography: use darker color for article heading and increase border size ( 1922075 ) BREAKING CHANGES links: Style of muted links have been changed slightly. It is still muted but has modern animation.","tags":"Release Notes","url":"https://dvesti.github.io/Pelican/2019/12/02/version-500/","loc":"https://dvesti.github.io/Pelican/2019/12/02/version-500/"},{"title":"Hyperlinks Styles","text":"Elegant has three styles for hyperlinks that you can use. Muted Style This is the default style of link. Example Link - Use Firefox Browser to support open web standards. This style is very suitable for long-form articles. To read the rationale behind this choice, read our help article Why Does Elegant Look The Way It Does? . Amplified Style We understand not all links should be muted. Some links require attention. Example Link - Use Firefox Browser to support open web standards. To use this style, you need to enable Markdown attribute list extension . # Plugins and extensions MARKDOWN = { \"extension_configs\": { \"markdown.extensions.extra\": {}, \"markdown.extensions.meta\": {}, } } Then use this style using ampl class. [Example Link](https://www.mozilla.org/){: class=\"ampl\"} blah blah","tags":"Components","url":"https://dvesti.github.io/Pelican/2019/12/02/hyperlinks-styles/","loc":"https://dvesti.github.io/Pelican/2019/12/02/hyperlinks-styles/"},{"title":"Elegant Is Safe","text":"Static sites are usually safer than server side rendered sites. There can be some edge cases though even for a static site. We came to know about a potential security issue that involves, target=\"_blank\" . We have updated our code to follow the recommended fix. You can read more about the issue and its fix at these links, About rel=noopener react/jsx-no-target-blank","tags":"101 — Quick Start","url":"https://dvesti.github.io/Pelican/2019/12/02/elegant-is-safe/","loc":"https://dvesti.github.io/Pelican/2019/12/02/elegant-is-safe/"},{"title":"Permalinks To Headings","text":"First, you need to enable the toc extension for Markdown in your Pelican configuration. MARKDOWN = { 'extension_configs' : { 'markdown.extensions.toc' : {} } } Then enable permalink option available for the toc extension. MARKDOWN = { 'extension_configs' : { 'markdown.extensions.toc' : { 'permalink' : 'true' , } } } Enabling the permalink option will provide direct links to each heading. Hover over following example heading to see the permalink. Example Heading You would get this, Tip When set to True the paragraph symbol or &para; is used by Python markdown. This becomes part of the RSS feed. We recommend setting permalink option to a space. MARKDOWN = { 'extension_configs' : { 'markdown.extensions.toc' : { 'permalink' : ' ' , } } }","tags":"Components","url":"https://dvesti.github.io/Pelican/2019/12/02/permalinks-to-headings/","loc":"https://dvesti.github.io/Pelican/2019/12/02/permalinks-to-headings/"},{"title":"Use PostCSS To Compile CSS Style Sheets","text":"Elegant uses GulpJS and PostCSS to do pre and post processing, like adding vendor prefixes or compressing the CSS file . Why not use Pelican assets plugin? Pelican's assets plugin uses Python's webassets package . Unfortunately, webassets have not had a release since early 2017 . Requests to revive the project have gone unheeded . I tired to install webassets from the Git repository to use its PostCSS filter but it didn't work. Instead of wasting time in wrestling the code of an unmaintained project, I decided to use PostCSS which is modern and actively maintained. How to use PostCSS This is closely related to LiveReload Elegant Documentation Using Gulp.js Prerequisites You need to run following steps only once, to setup the LiveReload using gulp. Step 1: Install NodeJS and Yarn Install Node.js and Yarn on your system. If you are on Windows then try installing them with scoop.sh . It saves time and makes update easier. Step 2: Install gulp Run this command from your command line terminal. yarn global add gulp-cli Step 3: Install Dependencies In the root of the Elegant repository, run yarn install yarn will create node_modules folder in the root. Step 4: Run gulp In the root of the Elegant repository, run gulp css It will compile the CSS present in static/css folder into static/css/elegant.prod.css . To live preview your changes, use gulp How does it work? Gulp and PostCSS, takes all the CSS files present inside static/css folder. It applies PostCSS plugins on it like CSS compression. It then writes the generated version in static/css/elegant.prod.css file. This is the file a Pelican blog uses when it uses Elegant theme. If user has enabled assets plugin , then this file is again made to go through webassets cssmin filter. Although this step is redundant because elegant.prod.css is already compressed. But it is necessary in case user has decided to customize the theme using custom.css . In which, assets cssmin filter will combine elegant.prod.css and custom.css into one file style.min.css .","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/12/01/use-postcss-to-compile-css-style-sheets/","loc":"https://dvesti.github.io/Pelican/2019/12/01/use-postcss-to-compile-css-style-sheets/"},{"title":"Blockquote Style","text":"A blockquote with a single paragraph. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pellentesque eu tincidunt tortor aliquam nulla facilisi. A blockquotes with multiple paragraph. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pellentesque eu tincidunt tortor aliquam nulla facilisi. Nibh tortor id aliquet lectus proin nibh nisl condimentum id. Lobortis feugiat vivamus at augue. Sed augue lacus viverra vitae congue eu consequat. Elit pellentesque habitant morbi tristique senectus et. Netus et malesuada fames ac turpis egestas. Porttitor rhoncus dolor purus non enim praesent elementum facilisis. Augue eget arcu dictum varius duis at consectetur. Pharetra pharetra massa massa ultricies mi quis. Vulputate enim nulla aliquet porttitor lacus luctus accumsan. Pulvinar neque laoreet suspendisse interdum. Ultrices eros in cursus turpis massa tincidunt dui ut ornare. Sem et tortor consequat id porta nibh venenatis. Nulla facilisi morbi tempus iaculis urna id volutpat lacus. Arcu ac tortor dignissim convallis aenean. Mauris pharetra et ultrices neque ornare. Scelerisque fermentum dui faucibus in ornare. Nibh tellus molestie nunc non blandit.","tags":"Components","url":"https://dvesti.github.io/Pelican/2019/12/01/blockquote-style/","loc":"https://dvesti.github.io/Pelican/2019/12/01/blockquote-style/"},{"title":"Headings Style","text":"Following are the examples of headings as they appear inside an article. Heading 1 code small Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pellentesque eu tincidunt tortor aliquam nulla facilisi. Nibh tortor id aliquet lectus proin nibh nisl condimentum id. Lobortis feugiat vivamus at augue. Sed augue lacus viverra vitae congue eu consequat. Heading 2 code small Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pellentesque eu tincidunt tortor aliquam nulla facilisi. Nibh tortor id aliquet lectus proin nibh nisl condimentum id. Lobortis feugiat vivamus at augue. Sed augue lacus viverra vitae congue eu consequat. Heading 3 code small Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pellentesque eu tincidunt tortor aliquam nulla facilisi. Nibh tortor id aliquet lectus proin nibh nisl condimentum id. Lobortis feugiat vivamus at augue. Sed augue lacus viverra vitae congue eu consequat. Heading 4 code small Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pellentesque eu tincidunt tortor aliquam nulla facilisi. Nibh tortor id aliquet lectus proin nibh nisl condimentum id. Lobortis feugiat vivamus at augue. Sed augue lacus viverra vitae congue eu consequat. Heading 5 code small Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pellentesque eu tincidunt tortor aliquam nulla facilisi. Nibh tortor id aliquet lectus proin nibh nisl condimentum id. Lobortis feugiat vivamus at augue. Sed augue lacus viverra vitae congue eu consequat. Heading 6 code small Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pellentesque eu tincidunt tortor aliquam nulla facilisi. Nibh tortor id aliquet lectus proin nibh nisl condimentum id. Lobortis feugiat vivamus at augue. Sed augue lacus viverra vitae congue eu consequat.","tags":"Components","url":"https://dvesti.github.io/Pelican/2019/12/01/headings-style/","loc":"https://dvesti.github.io/Pelican/2019/12/01/headings-style/"},{"title":"Version 4.0.0","text":"4.0.0 (2019-08-22) Bug Fixes admonition: an artifact in border behind the title ( 88113c3 ) admonition: reduce border radius to match radii of other components ( de08d20 ), closes #490 admonition: remove box shadow ( d059db8 ), closes #490 admonition: remove text-shadow from heading ( 1c889da ), closes #490 clean URL : default URL of categories, tags and archives fails on some servers ( 3c7df6a ), closes #280 #276 comments: W3C validation errors ( 76a1f26 ) disqus: remove SITEURL condition to show Disqus comments section ( 753d5a5 ) Lang: do not override default value of DEFAULT_LANG set by Pelican ( d6c60c2 ) social: reduce icon sizes in the sidebar ( c769ba3 ) social: use nofollow for social links in the sidebar ( 50cff87 ) social: W3C validation error ( ec4521e ) table: reduce border radius to match radii of other components ( 7eaaa96 ) w3c validation: remove incorrect usage of article tag ( e8231e0 ), closes #251 w3c validation: remove obsolete charset attribute ( 8deb285 ), closes #251 w3c validation: remove redundant article tag ( d07c27e ), closes #251 w3c validation: remove redundant sections without heading ( df9221f ), closes #251 w3c validation: remove type and language attributes ( b700224 ), closes #251 w3c validation: update CSS rules ( 0b78d46 ), closes #251 Features 404: auto fill search box with URL fragment that was not found ( c0a7f47 ) admonition: add box shadow ( 246f826 ) admonition: border color should match the title color ( 1adadbe ) admonition: increase contrast of title ( 7fb82cc ) admonition: use svg image instead of font-awesome icon ( e7c4029 ), closes #487 clean url: support clean URL for search page ( 088791e ) comments: add support for utterances comment system ( a2151cc ), closes #288 quotes: improve style and remove font-awesome for quote icon ( 9ef3ac8 ), closes #487 social: add icons for 7 more websites ( 8dcf8fa ), closes #494 social: use svg icons instead of font-awesome ( 19f458b ) table: add style rule to make tables pop out ( 6a8500b ), closes #440 Performance Improvements admonition: add attributes to svg images ( a740a60 ) requests: remove font awesome ( 7c20145 ), closes #487 BREAKING CHANGES requests: We have removed font awesome. Now we use svg images for all icons. This will result in one less web request, which in turn will improve your websites performance. social: Style customization and configuration of social icons in the sidebar has changed. New icons have better colors and bigger sizes. clean URL : To enable clean URLs for tags, categories and archives, first configure your server to support clean URLs. Then set TAGS_URL , CATEGORIES_URL and ARCHIVES_URL to \"tags\" , \"categories\" and \"archives\" respectively.","tags":"Release Notes","url":"https://dvesti.github.io/Pelican/2019/08/23/version-4-0-0-release-notes/","loc":"https://dvesti.github.io/Pelican/2019/08/23/version-4-0-0-release-notes/"},{"title":"Comments — Enable Utterances","text":"🔮 You can use Utterances for comments. You have to set UTTERANCES_REPO to the repository Utterances will connect to. That's it. Elegant will take care of the rest. You can see a working example of Utterances comments in this article. Extra Customization Besides setting UTTERANCES_REPO , you also have control over following variables. UTTERANCES_THEME . It's default value is github-light . For other valid values refer to utterances documentation UTTERANCES_LABEL . It's empty by default. If set, Utterances will it to the issues it will create. Warning Label names are case sensitive. The label must exist in your repo. Utterances cannot attach labels that do not exist. Emoji are supported in label names.✨💬✨ Show Utterances comments by default Just set UTTERANCES_REPO variable. Hide Utterances comments by default Unset UTTERANCES_REPO variable. This is the default setting. Hide Utterances comments by default. Show on Selected Set UTTERANCES_REPO Set UTTERANCES_FILTER to True This will hide Utterances form on all pages. Now to show Utterances form on selected posts, in article metadata set utterances_filter : off Show Utterances comments by default. Hide on Selected Set UTTERANCES_REPO Remove UTTERANCES_FILTER or set it to False which is its default value This will hide Utterances form on all pages. Now to hide Utterances form on selected posts, in article metadata set utterances_filter : on","tags":"Connecting With Your Readers","url":"https://dvesti.github.io/Pelican/2019/08/18/enable-utterances-comments/","loc":"https://dvesti.github.io/Pelican/2019/08/18/enable-utterances-comments/"},{"title":"How to display your Social Media Profiles","text":"Bloggers use different tools to connect with their readers, engage in discussion with them, and create a loyal following of fans. These tools range from fully blown social web apps like twitter to old school RSS feeds. Bloggers usually add a social media widget to their blog which has links to all their social media profiles; inviting readers to engage with them else where on the web too. Most social widgets are loud and obtrusive. Their colors and placement takes away readers' attention from the actual content. Elegant understands the importance of readers engagement but it makes sure not to push author's \"online social karma\" down readers' throats. Elegant displays the widget in the sidebar. Each icon is a link to a social media profile with an optional title attribute. Icons use muted color which changes when user hovers over them. On hover, icon is also scaled up in size. Here is an example of hovering over LinkedIn icon. Following image shows these icons in color. These SVG icons are Super Tiny . Most of them have sizes less than 500 bytes, and none of them exceeds 1 K bytes in size. This gives you increased website speed. How to configure the widget Define SOCIAL in your pelicanconf.py . SOCIAL is list of tuple. Each tuple has three items, key , case insensitive, must match one of the available keys URL title , optional SOCIAL = ( ( 'Email' , 'example@example.com' , 'My Email Address' ), ( \"Github\" , \"https://github.com/Pelican-Elegant/\" , \"Elegant Github Repository\" ), ( \"RSS\" , SITEURL + \"/feeds/all.atom.xml\" ), ( \"Facebook\" , \"https://facebook.com/ExamplePage/\" ), ) If title is defined then it is used to populate title attribute of the link. Available Keys Calendar Email Facebook Github GitLab Gmail Goodreads HackerNews Instagram Keybase LinkedIn Mastodon Reddit RSS Spotify StackOverflow Telegram Twitch Twitter Wire YouTube How to customize Social Profile Label By default, Elegant labels social profile section as Contact . You can change this label by defining a new variable SOCIAL_PROFILE_LABEL in your pelicanconf.py file. SOCIAL_PROFILE_LABEL = u 'Stay in Touch' Missing Social Profile? What if the icon of your social media site is not available? Migrating from font-awesome to SVG icons opened up a whole lot of possibilities. We are not limited to icons provided by the [font-awesome] project. Instead, we can use any SVG icon. If you icon of your favorite site is missing then feel free to open an issue . We will add it for you as long as a SVG icon is available for it.","tags":"Connecting With Your Readers","url":"https://dvesti.github.io/Pelican/2019/08/12/how-to-display-your-social-media-profiles/","loc":"https://dvesti.github.io/Pelican/2019/08/12/how-to-display-your-social-media-profiles/"},{"title":"Tables","text":"Tables in Elegant theme have rounded borders and striped alternating rows. Season Episodes First aired 1 13 June 2, 2002 2 12 June 1, 2003 3 12 September 19, 2004 4 13 September 10, 2006 5 10 January 6, 2008","tags":"Components","url":"https://dvesti.github.io/Pelican/2019/08/11/tables/","loc":"https://dvesti.github.io/Pelican/2019/08/11/tables/"},{"title":"Clean URL","text":"Out of the box, Pelican generated URLs are unclean , i.e. they have .html appended. Elegant lets you use clean URLs with minimal configuration. Mandatory To use clean URLs, you server must support it. Categories, Tags and Archives In your Pelican configuration set following values TAGS_URL = \"tags\" CATEGORIES_URL = \"categories\" ARCHIVES_URL = \"archives\" With it set, your categories, tags and archives will be served from following links, /categories /tags /archives If you do not set the variables then the URLs will become /categories.html /tags.html /archives.html Articles For clean URLs for articles, just set ARTICLE_URL = \"{slug}\" Pages For pages, set PAGE_URL = \"{slug}\" PAGE_SAVE_AS = \"{slug}.html\" Search For search page, set SEARCH_URL = \"search\"","tags":"Advanced Features","url":"https://dvesti.github.io/Pelican/2019/08/10/clean-url/","loc":"https://dvesti.github.io/Pelican/2019/08/10/clean-url/"},{"title":"Using ‘yaspeller' with Elegant","text":"Even with most code editors having a spell checker installed and active by default, there is a need to have the Elegant builds verify spelling against a known dictionary. The spell check tool that was decided on by the team is the yaspeller tool . This tool is useful in that it has a number of options for altering what it considers eligible for scanning. In its default mode, the yaspeller tool will scan everything in a Markdown document except for text encapsulated within code blocks, such as: ```text [text ommitted for breverity] ``` OR this `yaspeller` tool is cool While yaspeller is a useful tool, it is not foolproof. When scanning the documentation files, it often requires a bit of assistance in determining how to properly handle words which do not appear in the standard dictionary. What To Do With Spelling Mistakes There are typically 4 categories of spelling mistakes: an honest mistake, a word to be added to the project dictionary, a single situational misspelling, and intentional misspellings within a block of text. The way to address mistakes in the first category is simple. Fix them. If you are not 100% sure that the word is spelled properly, consider using dictionary.com to verify the spelling. If you search for a given word and a simpler form of that word appears, scroll down to the related words section and see if it is there. Adding A Word to the Project Dictionary If the spelling mistake has been verified to be a properly spelled word, then the word jumps over to the second category: a word to be added to the project dictionary. The root directory of the project contains the project dictionary with a list of words that yaspeller should consider acceptable. Words added to the dictionary in lower case will match upper case and lower case versions of the word, while words added with any capitalization will force yaspeller to perform a case-sensitive match. A Single Intentional Misspellings within a Line of Text For the third category, a single situational misspelling, the best example is included in the article Git Commit Guidelines . In that article, there is a section describing the legal values that can be associated with a commit type. While most of the values are fine, there is one value that is the short form for \"performance\": - **perf**: A code change that improves performance <!-- yaspeller ignore --> As this is the only word in the article that is intentionally spelled the way it is, the line ends with the <!-- yaspeller ignore --> suffix to tell the yaspeller tool to ignore the entire line. While we could add that single word to the project dictionary, it is more clear to ignore the word for this given situation instead of adding it to the dictionary. Intentional Misspellings within a Block of Text The final category, intentional misspellings within a block of text, is an extension of the previous category, but dealing with multiple intentional misspellings, instead of a single one. A good example of that would be specifying the contents for a table to show an example to the user, such as the following: Key Value File Name abc 1 stat-counter.md def 2 favicons-speed-dial-icons.md If you look at the Markdown for this article , notice how the table is surrounded with two HTML comments: <!-- yaspeller ignore:start --> and <!-- yaspeller ignore:end --> with blank lines between the comments and the block they are there to ignore. With those comments in place, the yaspeller tool does not raise any issues with the Markdown that generates this file, as it has been told to ignore everything starting with the first comment and ending with the second comment. If these are removed, the yaspeller tool will output the following errors: [ERR] /enlistments/elegant/documentation/content/articles/Contributing/ya-spell-check.md 3450 ms ----- Typos: 2 1. def (129:3) 2. favicons (129:13) Capitalization: 1 1. abc (128:3, suggest: ABC) ----- Why Spell Check Locally Similar to the other checks that are performed on every submission, a spell check failure will cause the build to fail. Addressing any failures reported locally by this tool results in a smaller turn around time in getting any spelling mistakes addressed. This in turn will save time when submitting changes in a Pull Request, as you have already dealt with any errors that this tool may report. Prerequisites For Local Installation Either Node.js or Yarn must be installed on your system. How Do I Install It Locally You can install the yaspeller package using either NPM (Node.js) or Yarn as follows: npm install -g yaspeller OR yarn global add yaspeller How Do I Use It Locally To invoke the yaspeller package for the documentation files for the Elegant project, go to the root directory of your local repository and enter the following command: yaspeller --only-errors documentation/content/ *.md When executed, the yaspeller tool will recursively scan all of the *.md files under the documentation/content/ directory from the root of your local repository. The --only-errors flags merely restricts any of the output to any errors that occur, instead of an ongoing stream of what files it is scanning. As omitting the --only-errors flag only affects the output and not the detection of spelling mistakes, feel free to not use it when running locally.","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/08/04/yaspeller-for-elegant/","loc":"https://dvesti.github.io/Pelican/2019/08/04/yaspeller-for-elegant/"},{"title":"Как я могу внести свой вклад?","text":"Once you have decided to contribute to the project , we need to go over some rules and guidelines before you can start. These rules and guidelines help us work together as a team and give us a common set of directions that keep us all on the same page. In the case of any disagreements on what needs to be done, we can always refer to the guidelines to help us find our way from disagreement to consensus. Before We Start This document strives to provide a solid path through contributing a change to Elegant, from setting up your environment to submitting and responding to a Pull Request. To stay focused on that solid path, additional information that is typically needed to provide a complete picture of the topic being discussed will be presented in other articles and linked to from this article. Please take the time to familiarize yourself with the information in the attached articles, as they will help you build a complete understanding of our entire contribution process. Getting The Big Rule Out of the Way As the project is an open source project, anything you contribute to the project is covered by the project's Contributions License . If you are not willing or unable to abide by those licenses, we cannot have you contribute to the project. Primary Goal The primary goal of this project is to provide a theme for Pelican that provides the Elegant Look and Feel to our user's websites. To that end, any features or changes must: not negatively effect readability and reading experience not cause distraction for the reader any changes must work out of the box with sensible defaults for the user These are not negotiable. Developing Changes Locally The Elegant project is hosted in GitHub and requires your machine to have a local Git Client to contribute. The Git documentation site has good instructions and videos on how to get started with Git, as well as numerous instructional videos on YouTube to get you going. If you are new to Git, they are a great place to start! Read The Guides In addition to installing Git locally, we request that you take a solid look through the following guides. The first guide, Git Tips For Beginners , is a walk through of things that our team has found useful in the past to help get people up and going with their contributions. While this guide is optional, pointing people at this guide has resolved a fair number of questions in the past. The second guide, our team's Git Commit Guidelines , is required reading for all contributors. These guidelines document the rules we require every contributor to follow when submitting commits for consideration. To make things easier for contributors, the repository includes configuration to use Commitizen for Git commits . Entering git-cz on the command line within the repository will walk you through a series of prompts to build a commit message that is fully compliant with our guidelines. It's usage is highly recommended to avoid issues. Optional Setup To assist you in preparing your contributions with minimal friction, you can optionally run one or more pieces of our automated build pipeline on your local machine. Depending on the depth and complexity of your changes, having these present on your local machine are often a time saver in terms of detecting bugs before you submit a Pull Request for your changes . Choosing to run any of these checks locally will shorten the minimum time required to notice a failure from 3-5 minutes for them to run on the GitHub machines to an average of 60 seconds or less for those same checks to run on your local machine. Running Pre-Commit Hooks Locally Facilitating the early detecting of pre-commit hook failures, an option is to install the Pre-commit tool in your local repository. With the Pre-commit tool installed, any commits to your local Elegant repository will be subjected to the same verification that is performed when you submit a Pull Request for your changes . This tool integrates with your local repository, so once installed it is automatically executed as part of your normal git commit process. Running the Spell Checker Locally As the dictionary in the environment that you develop changes in may be different than other contributors, the team has elected to include a the yaspeller tool as part of our build pipeline. While this does not integrate with your local repository like the Pre-commit tool, running this locally can help shorten the cycle for ensuring that your spelling is spot on! Making Your Changes to Elegant With all of the required, recommended and optional setup behind us, and all of the submitting of the changes ahead of us, it is time to focus on how to develop features for Elegant. To ensure that this topic is given the focus it requires, the article Developing Features For Elegant is dedicated to providing that information to contributors. Note While this section rightfully belongs where it is in terms of workflow, it is recommended that you continue reading this article to it's end. This will allow you to understand what comes after your changes, and may influence implementtion changes to avoid possible problems later on in the workflow. Submitting a Change For Consideration Submitting your changes is performed using the GitHub Pull Request feature . Before starting the Pull Request, you must push any committed changes from your local repository to your forked Elegant repository on GitHub. Once that has been done, go to the Compare Changes page and click on the compare across forks text right underneath the title. Across the top of the page, you will see 4 selection drop downs that look like this: These drop downs allow you to select where to compare changes from and to. Leave the first selection alone, and unless instructed otherwise, select next from the second selection. Select the name of your repository fork from the third selection, typically your GitHub account name followed by /Elegant . Finally, select the branch that your changes are in on the forked repository in the last selection. Note Typically, most people synchronize the branch name of their local repository with the branch name they push to on their forked repository. If you push your local changes to a different branch on your forked repository, select the name of the branch in the last selection. Once you confirm that the changes that are now visible at the bottom of the page are the ones you intend to submit, press the Create New Pull Request button. The edit field at the top of the page must have a name that identifies what the change is and is important to relay the scope of your change. However, the editor field below it is where most of the required information is. Currently there are 2 pre-requisites steps and 3 recommended steps as requirements of every Pull Request. If you have satisfied these requirements, change the [ ] text to [x] indicating that you have complied with the pre-requisite. Then proceed to the Description at the bottom and add a description that provides a good amount of information about what you changed and why. If there were any reported issues that you resolved, it doesn't hurt to mention them in this section. When you are done with adding that information, double check it and press the Create pull request button to submit the request. Building Your Changes on the GitHub Server After pushing the Create pull request button, you are transferred to another page that is mostly the same as any other GitHub Pull Request page. The main difference is the merge section near the bottom, where you will see something like the following: If the build verifies your changes, all 6 of the current checks will either have a grey box in front of them or a green checkmark. If any of the verifications fail, they will have a red X in front of the verification that failed. Click on the Details text on the right side to get more information on why those checks failed. Build Verification Actions To ensure each Pull Request contains solid changes, there are 3 sets of verification actions performed on each Pull Request. The first set of actions are the Header rules , Mixed content , Pages changed , and Redirect rules which are simple checks with pre-defined rule sets. These rules employ simple rule sets looking for changes that are outside the scope of the rest of the project, and rarely fire if you keep to the format of the other files in the repository. The next verification action is the Travis CI action that performs a complete build of the project, represented by the continuous-integration/travis-ci/pr action. A complete build of the project often takes 3-5 minutes, so this is the verification action you will be waiting on the longest. It is this part of the build that puts all of the changes through strict checks to make sure that the submitted changes are solid. install pre-requisites for building Pre-commit on the project source yaspeller on the project source publish for the documentation site w3c_validator on the documentation site html5validator on the documentation site More information on how our team uses Travis CI is detailed in this article . Previewing Changes The final verification action is a simple build and internal deploy of the Elegant documentation website , represented by the netlify/pelicanelegant/deploy-preview action. Clicking on the Details text on the right side of the action will redirect your browser to temporary deployment of the documentation website deployed using Netlify . If the changes that your are submitting are documentation changes or have an impact on the look and feel of Elegant, you should use the preview to manually verify your changes. Note The documentation preview is deployed to Netlify without performing a full build as detailed above, and is not dependant on the full build step. As such, you can manually verify your changes on the preview website while the full build is ongoing. View Previews For Other Pull Requests This Netlify temporary deployment is also useful tool that can be used to see the effects of any Pull Request on the documentation website. For example, if we want to look at what the effects of Pull Request #458 were, we have a solid path to view those changes. Each of the recently close Pull Requests was built with Netlify support enabled. As such, if you switch from the default Conversation tab to the Checks tab, you can see if Netlify succeeded. If it did succeed, there will be a View more details on Netlify link at the bottom of the page which will take you to the Netlify deployment of the Pull Request. At the top of the Deploy Log section is a Preview button that will take you to the temporary deployment of the documentation website, as if you had clicked on the Details link from the Pull Request page itself. What Happens If The Build Detects Errors? Once you fix any errors that the build detected, go through your normal verification process and submit the changes to your forked repository. If your Pull Request is still open, when GitHub detects that one of the repository/branch pairings in a Pull Request has been updated, it will execute any required checks from the beginning. At that point, you are effectively back at the Building Your Changes on the GitHub Server section above. This looping will continue until one of two things happen: all errors are dealt with OR you give up. At any point before the Pull Request is accepted and merged with the main repository, you can push the Close pull request button at the bottom of the page and close the Pull Request. This will perform a \"soft close\" on the Pull Request, with the option to re-open the Pull Request at a later date. Consider Using a Draft Pull Request If you want to make sure that your Pull Request builds on the server before submitting it for consideration by the team, consider using a Draft Pull Request. Instead of pressing the Create pull request button in the Building Your Changes on the GitHub Server section, click on the arrow on the right side of the button and select Create draft pull request . A draft request is exactly like a normal Pull Request except that it is not visible to anyone other than yourself. In this way, you can make sure the Pull Request is exactly the way you want it before asking for it to be considered part of the project. Something that is often forgotten about Pull Requests, and therefore Draft Pull Requests, is that you can edit most of the contents of the Pull Request after you have created it. Use this to your advantage as you get your Pull Request ready! What Happens If Team Members Ask For Changes? As we are a team, when changes are submitted for consideration, the team will offer feedback on the changes. The feedback will generally fall into 3 categories: yes, no, or almost. With the \"yes\" category, the changes will be accepted \"as is\" into the project. Conversely, in the \"no\" category, the changes are rejected, usually with a decent description of why they were rejected. Depending on the rejection reason, it may be possible to adjust your changes according to feedback in the rejection reason and submit it as a new Pull Request at a later date. In the \"almost\" category, the feedback will usually contain specific things that one or more of the team members want to see changed before it can be merged. This feedback can be a simple as a grammar error they want to see fixed, or asking for a more complete article documenting how to use your changes. The important part to note about this category is that the team feels that after the suggested changes have been performed, you can easily move to the \"yes\" category. Regardless of what category the feedback for your changes falls into, please remember that we are a team and we are at our best when we work together. If you have a disagreement, ask for clarifications and initiate a conversation to understand where the reviewer of the Pull Request is coming from. Work with that person to help yourself see their viewpoint.","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/08/04/how-to-contribute/","loc":"https://dvesti.github.io/Pelican/2019/08/04/how-to-contribute/"},{"title":"Version 3.2.0","text":"3.2.0 (2019-07-30) Bug Fixes freelists: open FreeLists subscription form in a new tab ( f81657c ) freelists: replace deprecated subscription form with button ( 9bfe3c1 ), closes #412 freelists: remove unused include ( 27f0831 ) Features comments: reduce transition duration from 500 to 200 ( b86e13d ) favicon: add 180x180 dimension shortcut icon support ( dd2ed24 ) filter: add black list, white list feature for Disqus ( 4887aec ) filter: add black list, white list feature for FreeLists ( 2407cc8 ) filter: add black list, white list feature for Mailchimp ( b96122d )","tags":"Release Notes","url":"https://dvesti.github.io/Pelican/2019/07/31/version-3-2-0-release-notes/","loc":"https://dvesti.github.io/Pelican/2019/07/31/version-3-2-0-release-notes/"},{"title":"Developing Features For Elegant","text":"Note this document is under construction In most cases, this default is to have any configuration variables that support those changes have a value of None . There is a bit more leeway given for supporting plugins, which are covered below , but even Elegant enhancement to support those plugins must follow these rules. Jinja Style Live Reload Live Reload With Python Live Reload With Gulp","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/07/22/developing-for-elegant/","loc":"https://dvesti.github.io/Pelican/2019/07/22/developing-for-elegant/"},{"title":"Using Pre-Commit Git Hooks","text":"When there was a single developer working on the Elegant project, there were none of the common problems associated with team projects: different styles and different processes. After the project was moved to the current bazaar development model , the team thought it best that all changes should follow the same set of stylistic guidelines. The Git clients provide a concept called Git hooks . Git hooks allow for custom code to be triggered when certain actions are performed with Git. One of the most common triggers is the pre-commit trigger, used to activate a program between a client request to commit and the actual act of committing the change. If the program reports a failure, the commit is aborted, hopefully with the failed program providing enough information for the user to diagnose the issue. Aren't Git Hooks Hard to Get Right? If you have tried to set up Git hooks before, there are usually two problems you have faced: the concept can be hard for people to understand and Git hooks are often frustrating difficult to debug. Add onto this the different operating systems and versions of those systems on top of that, and you can quickly get into nightmare territory for maintaining a Git hook. To solve most of these problems, the team decided to use the Pre-Commit Python package which provides a simple layer of abstraction over the Git hooks. The Pre-commit package makes managing, sharing and updating the Git hooks very easy. As it installs itself as a Git hook, once you have installed it properly, you may easily confuse it as a part of Git's commit process. Why Use Pre-commit Locally? Pre-commit runs Git hooks that among other things: Run Prettier applies common styling for Markdown, CSS , JS and json files Run Black applies common styling for Python files Removes trailing whitespace on lines Fixes the end of files to a common style Addressing any failures reported by these hooks locally will result in a smaller turn around time in getting those issues addressed. This in turn will save time when submitting changes in a Pull Request, as you have already dealt with any errors that this tool may report. How Do I Install It? The package itself is installed in typical Python fashion by using the Pip command: pip install pre-commit Once installed in your environment, you can install the Git hooks for your local repository by changing your directory to the root of that repository and executing the following command: pre-commit install How Do I Use It Locally? Once installed, Pre-commit appears to be part of the Git commit process. When you perform your next git commit command (including using the git-cz command for the Commitizen tool ), the Pre-commit package will download any tools it requires to properly run any required hooks. These tools are cached, so you will typically only experience a long wait on the first time the Pre-commit package is executed. If the hooks run by the Pre-commit package fail for some reason, they will clearly notify you of which of the hooks failed and typically present you with a reason why the hook failed. Note that some of the hooks, such as the prettier hook, may make some changes to your files to bring them in line with the project's common style. If any changes occur, they will not be staged to your local repository, making any changes visible using the git status command. If the hook failed due to an error, you need to fix that error before it will allow you to continue. If the hook failed because it made a change, make sure to verify the change that was made for you, after making sure it will not have a negative effect on your changes. It is then your responsibility to stage all changes to the repository before committing the change again. For Windows Users If you run these checks on Windows, the check-executables-have-shebangs hook will fail as Windows does not require that executable files start with a shebang and all files implicitly have the execute or +x permission for Linux. To skip this check, enter set SKIP=check-executables-have-shebangs on the command line before you execute the Pre-commit package, either from a Git hook as detailed above, or manually, as detail in the following section. Can I Run The Hooks Without a Commit? The full set of hooks are available by entering the following command: pre-commit run -a This will run the full set of hooks and report any errors. It is often useful to run this command before committing, even if you are using Commitizen for your commits as is recommended. How Does The Project Run the Hooks For Submissions? The Elegant team fully believes in the Git hooks and their benefit to the team. As such, the Pre-commit package is executed on all of our team builds (using Travis CI ) for any commits and pull requests made on the Travis CI servers. For more information on how we use Travis CI to build the project, check out the article on Elegant and Travis CI .","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/07/22/use-pre-commit-git-hooks/","loc":"https://dvesti.github.io/Pelican/2019/07/22/use-pre-commit-git-hooks/"},{"title":"Elegant Logo","text":"Elegant community held a discussion to decide a Logo for the project. We settled on following icon from Pelican by Smalllike from the Noun Project . Created by Smalllike from the Noun Project Building on top of it, some modifications were made to it using Inkscape . The we cleaned it using svgo tool. It reduced file size by around 50%. $ svgo -i elegant_logo.svg --pretty elegant_logo.svg: Done in 80 ms! 8 .029 KiB - 52 .5% = 3 .815 KiB Then, we converted SVG to PNG using svgexport . $ svgexport elegant_logo.svg elegant_logo.png 100 % The resultant file was around 1MB is size. So we optimized it using ImageOptim , which reduced the file size by 98%. Your can download the files from our Git repository. https://github.com/Pelican-Elegant/elegant/tree/master/elegant-logo","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/07/22/elegant-logo/","loc":"https://dvesti.github.io/Pelican/2019/07/22/elegant-logo/"},{"title":"How To Use Commitizen for Git Commits","text":"The Elegant Contribution Guidelines require that each commit submitted for consideration be formatted according to the Git Commit Guidelines . To make this process easier, the Elegant repository is configured to support the Commitizen tool. This tool saves time by controlling the format of the Git commit messages to a set of predefined options and patterns. This formatting allows for our release process to be fully automated . Prerequisites Both Node.js and Yarn must be installed on your system. Install Commitizen From your command line terminal, go into the directory containing your fork of the Elegant repository, then execute the following commands: yarn global add commitizen yarn install Use Commitizen As the Elegant team has already made the repository Commitizen friendly , you can start using it for your commits by entering git-cz in your command shell instead of git commit . Make sure the changes that you want to commit to your fork are staged. Once invoked, Commitizen will prompt you for answers to a number of questions. As mentioned previously, the answers to these questions are formatted according to the Git Commit Guidelines before being placed into the message field for the commit. Commitizen then follows through and invokes git commit , committing the staged changes along with the formatted message that was crafted for you from the answers you provided. In some cases, such as a Git pre-commit hook failure , you may not want to re-answer the questions again. Once you fix the issues that prevented the commit from happening, you can use git-cz --retry to submit the commit again using the same answers that were used in the failed attempt. Video Demonstration For a quick video on how this process works in real life, click on the play button below.","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/07/22/use-commitizen-for-git-commits/","loc":"https://dvesti.github.io/Pelican/2019/07/22/use-commitizen-for-git-commits/"},{"title":"Automated Version Management and Release","text":"The Elegant project follows a \"release early, release often\" software development philosophy. By employing this philosophy, we are able to have each team member working on a different aspect of the project with next to no friction from each other's changes. At any point, any team member can pull changes that have been made in another branch to their fork of the repository and exercise their changes with complete confidence. Release process should be fully automated to materialize this goal. Release Versions Version management and publishing is accomplished using the semantic-release tool and it's configuration file . This tool entirely removes human intervention from deciding the type and label of the next release of the project. How Does Versioning Work? Semantic release bases it's decisions on the Semantic Versioning 2.0.0 specification , which is very specific. A quick summary is as follows. Each version is detailed in the form: MAJOR.MINOR.PATCH . The PATCH version is incremented when only backwards compatible bug fixes are made in the release. The MINOR version is incremented (and PATCH reset to 0) when functionality is added in a backwards compatible manner to the release, along with any backwards compatible bug fixes. The MAJOR version is incremented (and MINOR and PATCH reset to 0) when incompatible API changes are introduced, along with any backwards compatible features or fixes. Here are some examples of release types that are generated based on commit messages: Commit Message Release Type fix(pencil): stop graphite breaking when too much pressure applied Patch Release feat(pencil): add ‘graphiteWidth' option Minor Feature Release perf(pencil): remove graphiteWidth option BREAKING CHANGE : The graphiteWidth option has been removed. The default graphite width of 10mm is always used for performance reasons. Major Breaking Release Note that the release type is specified as if that commit was the only commit in the release. If the first two commits were put together in the release, the Minor Feature Release of the second commit would take precedence over the Patch Release of the first commit. In the same manner, the Major Breaking Release of the third commit would take precedence if all three commits were submitted in the same release. CHANGELOG File Updates An integral part of the release is updating the CHANGELOG . By mandating that any commits for the project follow a mandated format for the commit messages , the commits being added to the release can have their commit messages scanned by a tool, including relevant portions into the release notes. This too is done automatically. Example of an Automated Release Here is an example of an automated release. This is the Version 3.2.0 that was released on 30-Jul-2019. The specifics about the release can be obtained by clicking on the 7 digit hexadecimal number below the version tag on the left side of the page, which will take you to the release commit . This release can also be viewed by performing a git log --grep=chore(release) command and looking for the specific release information in the logs. You can then view the specific information for that commit by using the git show command with the hash for the release's commit, git show 48f39643edd6c3b7449af5dae8ade6323bc7c21f . Using either process, the result will look like: commit 48f39643edd6c3b7449af5dae8ade6323bc7c21f Author: semantic-release-bot <semantic-release-bot@martynus.net> Date: Tue Jul 30 19:56:10 2019 +0000 chore(release): 3.2.0 [skip ci] # [3.2.0](https://github.com/Pelican-Elegant/elegant/compare/V3.1.0...V3.2.0) (2019-07-30) ### Bug Fixes * **freelists:** open FreeLists subscription form in a new tab ([f81657c](https://github.com/Pelican-Elegant/elegant/commit/f81657c)) * **freelists:** replace deprecated subscription form with button ([9bfe3c1](https://github.com/Pelican-Elegant/elegant/commit/9bfe3c1)), closes [#412](https://github.com/Pelican-Elegant/elegant/issues/412) * **freelists:** rm unused include ([27f0831](https://github.com/Pelican-Elegant/elegant/commit/27f0831)) ### Features * **comments:** reduce transition duration from 500 to 200 ([b86e13d](https://github.com/Pelican-Elegant/elegant/commit/b86e13d)) * **favicon:** add 180x180 dimension shortcut icon support ([dd2ed24](https://github.com/Pelican-Elegant/elegant/commit/dd2ed24)) * **filter:** add black list, white list feature for Disqus ([4887aec](https://github.com/Pelican-Elegant/elegant/commit/4887aec)) * **filter:** add black list, white list feature for FreeLists ([2407cc8](https://github.com/Pelican-Elegant/elegant/commit/2407cc8)) * **filter:** add black list, white list feature for Mailchimp ([b96122d](https://github.com/Pelican-Elegant/elegant/commit/b96122d)) In the main body of the output, there are links with associated text which are 7 digit hexadecimal numbers. Each of these links is to a specific commit that was part of the release. If you follow the link, you can verify that the correct text is being used for the release notes. Additionally, there are links that are associated with text that starts with the # character followed by an integer. Each of these links is to an issue that was either updated or fixed by the given commit. As with the above paragraph, you can verify that the correct issue was associated with the commit in the release notes by following the commit links and looking for any issue number at the end of the commit text. As the commits added in to this release included features, the Minor Feature Release release type was used, incrementing the minor part of the version number from 3.1.0 to 3.2.0.","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/07/20/fully-automated-version-management-and-release/","loc":"https://dvesti.github.io/Pelican/2019/07/20/fully-automated-version-management-and-release/"},{"title":"Git Commit Guidelines","text":"The Elegant release process is fully automated . To make this work, all commit message must adhere to a given set of rules. Why Have Commit Message Rules? From the semantic-release project : semantic-release uses the commit messages to determine the type of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release. What does that mean? It means that semantic-release parses the commit messages to arrive at a unbiased version number for a new release, and then creates that new release. This allows for a new release to be put together with little human involvement. What are those rules? The Elegant development team chose to use the Angular Commit Message Conventions as the baseline for the team's commit message conventions. Our conventions are largely derived from the Angular team's guidelines as documented here . Is There Something to Help Me With The Rules? Reading, understanding, and then getting used to following guidelines may take time. Even then, if you are in a hurry, you can sometimes forget what the rules are. It's only human. Our team has found life easier since we started using Commitizen for Git commits . Our project includes configuration for Commitizen that automatically formats each commit message to conform to our guidelines by walking you through a series of prompts. When you finish those prompts, a new commit messages is authored for you with the information from those prompts, following all of the rules in the following sections on the Commit Message Format. Tip Use Commitizen for Git commits . It does make life easier. It automatically formats the commit message to conform to our guidelines. Commit Message Format Each line of the commit message must be shorter than 101 characters! This allows the message to be easier to read on GitHub as well as in various git tools. Each commit message consists of a header , a body and a footer , as follows: <header> <BLANK LINE> <body> <BLANK LINE> <footer> Header The header is mandatory. It has a special format that includes a required type , an optional scope and a required subject : <type>(<scope>): <subject> Type The type must be one of the following: feat : A new feature fix : A bug fix docs : Documentation only changes style : Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc.) refactor : A code change that neither fixes a bug nor adds a feature perf : A code change that improves performance test : Adding missing or correcting existing tests chore : Changes to the build process or auxiliary tools and libraries such as documentation generation revert : A revert to a previous commit. See the section Revert Commits below. Scope The scope is intended to provide extra context on the changes included in the commit is for. This context should provide useful information to someone reading the commit log, including the reading of the commit log in the release notes. For example, if you fix something in the authors blurb section, a scope of authors would be appropriate. If you are changing something with how the landing page works, a scope of landing page or home would be appropriate. Subject The subject part of the header must follow these rules: always use the imperative, present tense: \"change\" not \"changed\", \"changes\", or \"changing\" do not capitalize the first letter no period ( . ) at the end of the line What is Imperative mode? Chris Beams, in his article on how to write a good commit message , gives a very good explanation of imperative mode. Imperative mood just means \"spoken or written as if giving a command or instruction\". A few examples: Clean your room Close the door Take out the trash The imperative can sound a little rude; that's why we don't often use it. But it's perfect for Git commit subject lines. Revert Commits If the commit reverts a previous commit, it must be specified with the revert type, followed by the complete header of the reverted commit as the subject. The body of the commit must start with the text: This reverts commit <hash>. , where the hash is the SHA of the commit being reverted. Body The body of the commit message must follow these rules: always use the imperative, present tense: \"change\" not \"changed\", \"changes\", or \"changing\" include your motivation for the change and how it contrasts with the previous behavior Breaking changes All breaking changes have to be mentioned in the body with the description of the change, justification and migration notes. The body must be prefixed with the text BREAKING CHANGE: . The following example is from the Elegant project repository . After the required prefix, it describes the problem it is solving, and why it was needed. In retrospect, while it does mention that LANDING_PAGE_ABOUT is no longer used, it should have gone into more detail on where to look up information on what was replacing it. feat(home): write about me in markdown, reST or asciidoc BREAKING CHANGE: Previously LANDING_PAGE_ABOUT was a dictionary that contained html tags. We used it to create landing page. But users have demanded from the very beginning to be able to write the landing page in markdown. This patch adds this feature. But in order to use it, you have to update your configuration. Closes #85 Footer Referencing issues Closed bugs should be listed on a separate line in the footer prefixed with the Closes keyword. Closes #234 If your commit closes multiple issues, list them on the same line separated by a comma. Closes #123, #245, #992 If your commit affects an issue, but does not fix it completely, use the \"Updates\" keyword Updates #234 Correct Message Format Examples The following are commits from our own repository that shows how Elegant has used these guidelines. New Features feat(monetization): add BestAzon support feat(Chinese): add better font support for Chinese language feat(footer): make external links Nofollow Fixes fix(reST): indents in line blocks is not preserved fix(gist): embedded Github gist are not laid out correctly Documentation docs(add): metadata variables docs(add): release notes for 3.0.0 docs(update): change category of reading-time article docs(update): set author information Miscellaneous chore(livereload): use es2015 syntax for gulp configuration ci(docs): use sitemap plugin in production only ci(docs): add default tasks.py file refactor: move Google and Bing claims to their individual files Incorrect Message Format Examples This commit message starts with a capital letter and ends with a period doc(changes): Rewrite of multi-part plugin per issue 308. This commit message does not use imperative mode. docs(change): updating status doc to reflect current state","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/07/20/git-commit-guidelines/","loc":"https://dvesti.github.io/Pelican/2019/07/20/git-commit-guidelines/"},{"title":"LiveReload Elegant Documentation Using Gulp.js","text":"Elegant has setup gulp.js and BrowserSync for LiveReload feature to its developers and documentation writers. This is a better alternative to the Python LiveReload solution that Pelican offers by default . Prerequisites You need to run following steps only once, to setup the LiveReload using gulp. Step 1: Install NodeJS and Yarn Install Node.js and Yarn on your system. If you are on Windows then try installing them with scoop.sh . It saves time and makes update easier. Step 2: Install gulp Run this command from your command line terminal. yarn global add gulp-cli Step 3: Install Dependencies In the root of the Elegant repository, run yarn install yarn will create node_modules folder in the root. Use LiveReload Run gulp command in the root of the elegant repository. gulp It will launch the browser and open the home page. Now when you edit the templates, CSS rules, JavaScript files, Markdown, or reStructuredText files, all opened tabs will automatically reload and reflect the change. It is set to serve the documentation at http://localhost:9001 . Why BrowserSync is better than Python-LiveReload BrowserSync supports pretty URLs, which Python-LiveReload doesn't . BrowserSync has number of additional powerful features. Interaction Sync This is an extremely powerful and useful feature. Your scroll, click, refresh and form actions are mirrored between browsers while you test. What it means is when you have URL open in more than one tabs or browsers. If you scroll in one tab, other tabs mirror the scroll movement. You can use this feature to test your website in desktop and mobile widths simultaneously. Open a link in one tab normally, and in other tab in responsive mode. Browser Based UI BrowserSync offers and easy to use UI . To access it, run gulp , open http://localhost:9002/ in your browser. Debug CSS You can add simple and depth CSS outlines to elements, or overlay CSS grid using BrowserSync. Open http://localhost:9002/remote-debug in your browser. Network Throttle You can test website on a slower network connection. To access open http://localhost:9002/network-throttle Is gulp.js necessary to use? We have plans to use gulp.js to utilize tools like PostCSS and Autoprefixer , in future. Currently we use gulp.js to watch for file changes. Pelican helper scripts does not watch for file changes. BrowserSync only watches the files that it servers, i.e. HTML , CSS and JS files. This means you need an external tool like gulp.js to watch Markdown and Jinja2 files. Can I avoid using gulp.js? No. You shouldn't. Because the alternate is not nice. We tried to use BrowserSync without gulp.js but due to limitation in Pelican helper scripts, it didn't pan out. We installed BrowserSync. Then on one terminal, from documentation folder, we ran invoke regenerate In other terminal, from documentation folder, we ran browser-sync start --server output --files output regenerate task compiles Markdown files to HTML . BrowserSync automatically picks the changed HTML files and reload the URLs. Unfortunately, regenerate keeps \"regenerating\" even if no file has changed. As a result, BrowserSync keeps reloading the URL every second. It becomes useless because you cannot inspect HTML elements, view console or change CSS rules from the browser, because the URL is constantly overloading. This forced us to resort to gulp.js for file watching.","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/07/19/live-reload-elegant-documentation-using-gulpjs/","loc":"https://dvesti.github.io/Pelican/2019/07/19/live-reload-elegant-documentation-using-gulpjs/"},{"title":"LiveReload Elegant Documentation Using Pelican","text":"Pelican introduced support for LiveReload in Version 4.1.0 . To use it, you need to install LiveReload pip package. pip install livereload Then run from the root of the documentation, invoke livereload You need to install invoke and tasks.py for this feature. It does not work with Makefile. pip install invoke Known Issue Pretty URLs Do Not Work Remove or comment out ARTICLE_URL = \"{slug}\" from Pelican configuration to make LiveReload work Unfortunately, Pelican LiveReload depends on Python-LiveReload , which does not support extension less files . What does it mean? Your URL must end at .html , like, http://127.0.0.1:9000/live-reload-elegant-documentation.html If it does not have the .html in the end, then LiveReload will return 404 error. This can happen if your Pelican configuration has ARTICLE_URL = \"{slug}\" Therefore, to make LiveReload work, comment out the above line. This issues has been reported to the Pelican team. You can track it here .","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/07/19/live-reload-elegant-documentation-using-pelican/","loc":"https://dvesti.github.io/Pelican/2019/07/19/live-reload-elegant-documentation-using-pelican/"},{"title":"What is LiveReload","text":"What does LiveReload do? LiveReload monitors changes in the file system. As soon as you save a file, it is pre-processed as needed, and the browser is refreshed. Elegant documentation is LiveReload ready. This feature saves a lot of time. Next time when you are writing or updating an article for Elegant documentation, just open a browser on one side of your monitor (or on secondary monitor) open URL of your article in the browser, for example http://localhost:9001/what-is-live-reload open the Markdown file of your article and start typing when you save the file, your markdown file will be compiled into HTML using Pelican, then your browser tab will reload automatically and show you the changes There are two ways to get LiveReload working for Elegant documentation. Using gulp.js (Recommended) Using Pelican","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/07/19/what-is-live-reload/","loc":"https://dvesti.github.io/Pelican/2019/07/19/what-is-live-reload/"},{"title":"Add A Reading Time Estimate to Your Articles","text":"When you go to articles on a number of popular websites, the articles will present an estimate to the reader on the amount of time it will take to read the article. This estimate is typically based on the average reading speed of an adult being roughly 265 words per minute while retaining comprehension. Elegant provides this feature, adding a Reading Time section at the top of the right sidebar with the estimate for the current article. Here is an example of what the Reading Time Estimate section may look like: Configuration To enable the reading time for your articles, you need to add post_stats to the PLUGINS configuration variable in your Pelican configuration. PLUGINS = [ 'post_stats' ] Note The post_stats plugin requires the Python beautifulsoup4 package to be installed. In addition, the READING_TIME_LOWER_LIMIT configuration variable can be set to specify a lower limit for this feature. If not supplied, the default value for this variable is 4 min. READING_TIME_LOWER_LIMIT = 10 If the estimated reading time is less than or equal to READING_TIME_LOWER_LIMIT value, the Reading Time section will not be included for the article. Given the default of 4 for this variable, this section will only be visible for articles that have an estimated reading time of 5 minutes or more.","tags":"Supported Plugins","url":"https://dvesti.github.io/Pelican/2019/07/15/add-reading-time-estimate/","loc":"https://dvesti.github.io/Pelican/2019/07/15/add-reading-time-estimate/"},{"title":"Version 3.1.0","text":"3.1.0 (2019-07-14) Features article: make article subtitle italic ( 7ca7331 ), closes #284 authors: add line above authors section ( 35a35b0 ) authors: add support for avatar ( cc92230 ), closes #362 authors: make authors URL nofollow ( 07bf415 ) authors: move authors below share links section ( b81555a ) authors: open author url in a new window ( f97b47a ) Chinese: add better font support for Chinese language ( 2711aa0 ), closes #134 modified: show Last Updated only if the difference between created and modified is more than a day ( b0eac79 ) monetization: add BestAzon support ( 6d8a23c ) Bug Fixes article: fix regression introduced in 7ca7331c0 ( 2c23961 ) authors: title attribute was not closed in quotes ( de1d05b ) gist: embedded Github gist are not laid out correctly ( 0416433 ), closes #123 reST: indents in line blocks is not preserved ( e1429c5 ), closes #144","tags":"Release Notes","url":"https://dvesti.github.io/Pelican/2019/07/15/version-3-1-0-release-notes/","loc":"https://dvesti.github.io/Pelican/2019/07/15/version-3-1-0-release-notes/"},{"title":"BestAzon Support","text":"Elegant supports BestAzon , so that you may monetize your traffic using affiliate links from Amazon. Similar to Amazon One Link , BestAzon provides technology that redirects Amazon links to each country shop by using your associate tags Elegant loads the script for BestAzon and inserts your configuration if AMAZON_BESTAZON is defined. Follow https://bestazon.io to generate the configuration based on your tag id's first. Then in your Pelican configuration, preferably in the file publishconf.py , set AMAZON_BESTAZON to your BestAzon configuration, for example: AMAZON_BESTAZON = \"\"\"var BestAzon_Configuration = { \"Amzn_AfiliateID_US\": \"redken01-20\", \"Amzn_AfiliateID_CA\": \"redken03-20\", \"Amzn_AfiliateID_GB\": \"redken01-21\", \"Amzn_AfiliateID_DE\": \"redken06-21\", \"Amzn_AfiliateID_FR\": \"redken07-21\", \"Amzn_AfiliateID_ES\": \"redken-21\", \"Amzn_AfiliateID_IT\": \"redken0d-21\", \"Amzn_AfiliateID_JP\": \"\", \"Amzn_AfiliateID_IN\": \"\", \"Amzn_AfiliateID_CN\": \"\", \"Amzn_AfiliateID_MX\": \"\", \"Amzn_AfiliateID_BR\": \"\", \"Conf_Custom_Class\": \" BestAzon_Amazon_Link \", \"Conf_New_Window\": \"1\", \"Conf_Link_Follow\": \"1\", \"Conf_Product_Link\": \"1\", \"Conf_Tracking\": \"1\", \"Conf_Footer\": \"1\", \"Conf_Link_Keywords\": \"\", \"Conf_Hide_Redirect_Link\": \"1\", \"Conf_Source\": \"BestAzonScript\" }; \"\"\" If this variable is defined, Elegant will load the BestAzon script that enables the link substitution. Now, when international visitors of your site click on a link on your site to buy from Amazon, they are redirected to their local or nearest Amazon market place. This is an optional feature. If you do not set the variable then BestAzon script is not added to the rendered output. You, as a content creator, should be aware of GDPR or other regulations. Section 5 of the Operating Agreement for Amazon Associates states that you need to disclose your affiliation with Amazon and that you earn from qualifying purchases. To conform to this rule in the agreement, Elegant automatically adds the disclaimer in the footer of the website if AMAZON_BESTAZON variable is set. It looks like this,","tags":"Monetizing Your Blog","url":"https://dvesti.github.io/Pelican/2019/07/14/amazon-bestazon/","loc":"https://dvesti.github.io/Pelican/2019/07/14/amazon-bestazon/"},{"title":"Version 3.0.0","text":"3.0.0 (2019-07-03) Bug Fixes admonition: links should inherit the admonition color ( 60c9184 ) freelists: use SUBSCRIBE_BUTTON_TITLE instead of generic GO ( c346d1f ) home: remove redundant title ( 808cd1d ) Features home: write about me in markdown, reST or AsciiDoc ( 9b5b2ec ), closes #85 menu: set home URL to root if SITEURL is not ( 23e0b94 ) BREAKING CHANGES home: Previously LANDING_PAGE_ABOUT was a dictionary that contained html tags. We used it to create landing page. But users have demanded from the very beginning to be able to write the landing page in markdown. This patch adds this feature. But in order to use it, you have to update your configuration.","tags":"Release Notes","url":"https://dvesti.github.io/Pelican/2019/07/03/version-3-0-0-release-notes/","loc":"https://dvesti.github.io/Pelican/2019/07/03/version-3-0-0-release-notes/"},{"title":"Code Style for Jinja2","text":"Please make sure to follow the code style of the existing code base. Specifically: use single ( '' ) rather than double ( \"\" ) quotation marks for Jinja strings in Jinja print statements, surround the variable with spaces inside curly braces – for example: {{ foo.bar }} use double ( \"\" ) quotation marks around HTML attributes end files with a newline You can run gulp validate task to validate the templates files using Jinja Ninja . It is not comprehensive but it does point out obvious mistakes. You can read more about using gulp here .","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/07/03/code-style-for-jinja2/","loc":"https://dvesti.github.io/Pelican/2019/07/03/code-style-for-jinja2/"},{"title":"Contributions License","text":"By submitting a change to the project, you implicitly acknowledge that you are following the following license rules. Licensing All contributions to the project are understood to be submitted under the same (inbound) license as the main (outbound) license of the main Elegant repository. All code and theme contributions are submitted according to the MIT License . All documentation contributions are submitted according to the CC - BY - SA -4.0 License . All contributions of code where the submitter is not the owner of the submission must indicate the source of the code, who the author or copyright holder is, and what license or licensing terms are being used to allow the contribution in the Elegant project.","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/07/03/contribution-license/","loc":"https://dvesti.github.io/Pelican/2019/07/03/contribution-license/"},{"title":"Git Tips for Beginners","text":"Here are some tips we have found useful for using Git to contribute to the project. How To Set Up Your Git Repository Create your own fork of Elegant by going to the project repository webpage on GitHub and pressing the Fork button. You will now be redirected to the page representing your fork of the repository. To clone the your fork of the repository to your computer, press the Clone or download button and follow the instructions provided. Create a directory to host your repository in and change to that directory. Run the following command to set your forked repository as Upstream : bash git remote add upstream https://github.com/Pelican-Elegant/pelican-elegant.git Pull Before Starting Changes Most of the changes that you will submit will be against the Upstream repository's next branch. Whether you decide to work in your local repository's next branch or create a new branch of your own, it is recommended that you do a git pull against the Upstream next branch before starting to work on a new set of changes. This will ensure that you are starting from a known good point, and reduce the chance of requiring a merge at a later stage. Updating/Rebasing to Upstream It is a good practice to update your repository to it's Upstream repository one or more times during the development of your changes. Specifically, the next branch of the repository is where most of the changes are submitted to, and you should either rebase or pull any changes down to your local repository from there. This practice will ensure that any changes that have been made to that Upstream branch are brought down where you can test your changes with anyone other changes. To update from the next branch, from within your project directory, enter the following commands: git fetch upstream next git rebase upstream/next Squash Commits & More Complex Rebasing Before you create a pull request in GitHub , you have the option to squash your commits into a single commit. This is often used to clean up a series of commits where you were experimenting with something or just had to fiddle with something to get it just right . To squash and rebase your commits, use the following command: git rebase --interactive upstream/master Warning As with all knives, especially Swiss-army knives, please take caution. Rebasing a repository after pushing one or more commits to another repository can be troublesome. For more on the interactive rebase command of Git, see its official documentation and helper articles such as this article .","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/07/03/git-tips-for-beginners/","loc":"https://dvesti.github.io/Pelican/2019/07/03/git-tips-for-beginners/"},{"title":"Metadata","text":"Pelican uses file metadata from your articles and pages text files to get information about your posts, like tags, authors etc. On top of \"official\" metadata, Elegant uses some optional metadata that you can use in your articles and pages. summary used for Search Engine Optimization subtitle used to set article subtitle keywords used for Search Engine Optimization modified used to set last updated time of the article series_title used with multi_part plugin featured_image used for Social Media Optimization share_post_intro used with share_post plugin comments_intro used with comments comment_id used with comments","tags":"Advanced Features","url":"https://dvesti.github.io/Pelican/2019/07/03/metadata/","loc":"https://dvesti.github.io/Pelican/2019/07/03/metadata/"},{"title":"Change Labels","text":"It is quite possible you will feel the need to tweak labels of different sections or widgets. For example, change label of social widget from \"Contact\" to \"Stay in Touch\". Don't worry! We got you covered! Elegant has all the customizable variables in one place. _defaults.html file . templates/_includes/_defaults.html Let's see how can we change social widget label. 1 2 3 4 5 6 {# Label for the list of social profiles #} {% if not SOCIAL_PROFILE_LABEL %} {% set SOCIAL_PROFILE_LABEL = 'Contact' %} {% else %} {% set SOCIAL_PROFILE_LABEL = SOCIAL_PROFILE_LABEL %} {% endif %} Line 1, text enclosed in {# #} is a comment, which says this section is about \"Label for the list of social profiles\". The text in all capital case SOCIAL_PROFILE_LABEL is the actual variable. Line 3 says SOCIAL_PROFILE_LABEL is set to Contact . To change this value, assign it a different value in your Pelican configuration, pelicanconf.py . SOCIAL_PROFILE_LABEL = 'Stay in Touch' That's it. The title of social widget will change. There are several others labels that you can customize easily without touching Elegant's source code.","tags":"Advanced Features","url":"https://dvesti.github.io/Pelican/2019/07/03/change-labels/","loc":"https://dvesti.github.io/Pelican/2019/07/03/change-labels/"},{"title":"Code Snippets — Change Theme","text":"Elegant uses Solarized theme for syntax highlighting. To replace it, copy contents of your preferred theme's CSS style sheet into custom.css . Alternatively, you can replace contents of pygments.css with your theme's style sheet. If you feel like experimenting with different themes then this repository has Pygments CSS of Vim themes. This one has Pygments CSS of built-in styles. Do not forget to change .codehilite CSS class identifier to .highlight . Code blocks in Pelican generated HTML use .highlight class.","tags":"Components","url":"https://dvesti.github.io/Pelican/2019/07/03/change-syntax-highlight-theme/","loc":"https://dvesti.github.io/Pelican/2019/07/03/change-syntax-highlight-theme/"},{"title":"Customize Style","text":"To customize Elegant's visual style, use custom.css . You can override Elegant's visual style like font, color, spacing etc using this sheet. This empty style sheet is present at following path in your Elegant folder, static/css/custom.css Find the code of the element you want to customize in elegant.css . Copy the element's selector and styles, and paste it in custom.css . Edit this CSS code and customize it to your liking. Your customizations will override whatever rules are defined in elegant.css . Let's take a look how you can change the style of hyperlinks in an article. Following is the relevant code, article p : not ( # list-of-translations ) : not ( # post-share-links ) a , article ol a , article div . article-content ul : not ( . articles-timeline ) : not ( . related-posts-list ) a { border-bottom : thin dashed #A9A9A9 ; color : #000 ; } Copy and paste it in custom.css . Change color to red for example, article p : not ( # list-of-translations ) : not ( # post-share-links ) a , article ol a , article div . article-content ul : not ( . articles-timeline ) : not ( . related-posts-list ) a { border-bottom : thin dashed #A9A9A9 ; color : red ; } Test your website using Pelican. All links should be colored red. Read this post to make sure your site's page speed does not decrease due to additional HTTP request.","tags":"Advanced Features","url":"https://dvesti.github.io/Pelican/2019/07/03/customize-style/","loc":"https://dvesti.github.io/Pelican/2019/07/03/customize-style/"},{"title":"Custom 404 Error Page","text":"When you go to a page that does not exist, your browser will display a default error page unless the website intervenes and provides it's own error page. Elegant provides an error page that allows the user to search for the page that they were trying to reach. Here is an example of what the 404 page may look like: Configuration To enable the custom 404 page, you need to add 404 to DIRECT_TEMPLATES in your pelican configuration. DIRECT_TEMPLATES = [ '404' ] Note that these values must be added to any existing values present for the DIRECT_TEMPLATES configuration variables.","tags":"Advanced Features","url":"https://dvesti.github.io/Pelican/2019/07/03/custom-404-page/","loc":"https://dvesti.github.io/Pelican/2019/07/03/custom-404-page/"},{"title":"Приглашение к участию","text":"This website, elegant.onCrashReboot.com , is an excellent demonstration of the theme that all of us contributors love. While looking for new features that add to what Elegant has to offer, we also continue to take great care that we adhere to Elegant's Look and Feel . This practice allows you, a website owner, the opportunity to give you readers a clean flow of reading through the body of the article with minimal destructions, with no loss of functionality. When new features are added, you can decide whether or not to adopt these features with the confidence that those new features will be consistent with what you already are using. This will provide the users of your website with something that is well thought out and organized, appealing to many readers. To accomplish this, Elegant is proudly a team driven open source project . While it was created in 2012 by Talha Mansoor, the change to a community driven project in early 2019 has energized the development of the project. By asking \"how can I help\" or \"do you need help with…\", people have slowly joined the team and enriched the theme to what you see today. The contributions of these people has allowed the project to grow beyond the scope of what any one of them could accomplish on their own. Their contributions, together as a team, are responsible for the project you see here today. What Can I Do? If using the Elegant theme and reading this invitation inspires you to contribute, we welcome the addition of your creativity to our team. No coding skills are required to volunteer to help with Elegant. The theme is mostly composed of templates written in Jinja utilizing metadata associated with each article. We are confident that if you want to help, we can get you up and running in no time! Where Do I Start? As you are volunteering your time and energy, we don't want you to take on a really big task to start, scaring you away in the process. For this purpose, we keep a refined list of lower priority issues to allow you to gently ease yourself into assisting with the project. If none of those issues appeal to you, feel free to look at all of our open issues , and see if any of those are more attractive to you. If none of that appeals to you and you still want to help, don't worry! We know we are not perfect and rely on feedback from our users to help us make the theme better for everyone. How Can I Help? See something that isn't working properly? Report a bug . See something that you think is missing? File a feature request . See an article that you think could be clearer? File a documentation issue . We welcome everyone and value every contribution. Our Thanks list exhibits we value and give credit to not only code contributors, but also the bug reporters and support seekers. We hope you will act professionally and respectfully and will avoid exclusionary behaviour.","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/07/03/invitation-to-participate/","loc":"https://dvesti.github.io/Pelican/2019/07/03/invitation-to-participate/"},{"title":"Why Does Elegant Look The Way It Does?","text":"Discussion Elegant is theme that is largely inspired by the following articles/tweets: Nicholas Carr's Experiments in delinkification Neha Narula response to Carr Article Collection of responses to Carr Article In the first source, Nicholas makes a solid argument that embedded hyperlink tags, such as this one , break the reader's concentration while reading. He also mentions that studies have been performed which measured reading comprehension of articles with and without visible hyperlinks. From his article: Even if you don't click on a link, your eyes notice it, and your frontal cortex has to fire up a bunch of neurons to decide whether to click or not. You may not notice the little extra cognitive load placed on your brain, but it's there and it matters. People who read hypertext comprehend and learn less, studies show, than those who read the same material in printed form. The more links in a piece of writing, the bigger the hit on comprehension. Inspired by the article, the Elegant theme was created as an extension of the suggestions in the Carr article combined with some of the concerns of the responses. Allowing the user a clean flow of reading through the body of the article is considered the highest priority for Elegant theme decisions. When present, the links are shown in a muted manner to minimize the impact on the cognitive load of the reader. Carrying that design choice forward results in two subsequent design choices: muted colors and sidebars for extra information. Following the spirit of the article, Elegant reduces any distraction by blending all elements with the background and elevating the article's content against the background. Instead of a distracting bright-blue hyperlink showing a link to an external source, a dotted underline and a slightly darker font color is used. Instead of using bold colors for the text and background of the admonitions and code blocks, lighter colors are used for both. Elegant also reduces the distractions by relocating the extra information contained in an article's Table of Contents to the left sidebar and displaying it in a smaller font. This allows the table to retain it's usefulness to the reader while not intruding on the article. In a similar fashion, the right sidebar is used to relate any other extra information about the article to the user. Elements that regularly appear in the right sidebar include: Category Last Updated time \" Monthly Updates\" opt-in Published time Reading Time Series section \" Stay in Touch\" icons Tags","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/07/03/look-and-feel/","loc":"https://dvesti.github.io/Pelican/2019/07/03/look-and-feel/"},{"title":"Add Search to Your Site","text":"Static sites usually do not offer search, as they are normally considered a dynamic task. Elegant uses the open-source LunrJS JavaScript library, to offer search for your static site. Here is an example of what the search result may look like: We have located the search box on the top right of the main navigation menu to allow visitors to search from any page. Configuration To enable search, you need to enable the tipue_search plugin and add search to DIRECT_TEMPLATES in your pelican configuration. PLUGINS = [ 'tipue_search' ] DIRECT_TEMPLATES = [ 'search' ] Note that these values must be added to any existing values present for the PLUGINS and DIRECT_TEMPLATES configuration variables.","tags":"Advanced Features","url":"https://dvesti.github.io/Pelican/2019/07/03/add-search/","loc":"https://dvesti.github.io/Pelican/2019/07/03/add-search/"},{"title":"Home Page — Unique Features","text":"This is the page that visitors see when they open your website. Your chance to make a good and lasting first impression. Most sites just display a list of recent posts. Elegant goes the extra mile. Check this out You can see three features here, Welcome Heading About me My Projects There is a third section below these two sections, \"Recent articles\". How to set them up We have detailed help articles to help you set these sections up Write Welcome Message Write About Me Projects List Recent Articles List","tags":"Components","url":"https://dvesti.github.io/Pelican/2019/07/01/unique-home-page-features/","loc":"https://dvesti.github.io/Pelican/2019/07/01/unique-home-page-features/"},{"title":"Home Page — Projects List","text":"Projects list is read from PROJECTS in your Pelican configuration ( pelicanconf.py ) file. It is an array of dictionaries. Each dictionary has three keys, name which will have name of your project, url which will have URL of the project, and description which will have the description of the project. You can define as many projects as you want. Here is an example, 1 2 3 4 5 6 7 8 9 PROJECTS = [{ 'name' : 'Logpad + Duration' , 'url' : 'https://github.com/talha131/logpad-plus-duration#logpad--duration' , 'description' : 'Vim plugin to emulate Windows Notepad logging feature,' ' and log duration of each entry' }, { 'name' : 'Elegant Theme for Pelican' , 'url' : 'http://oncrashreboot.com/pelican-elegant' , 'description' : 'A clean and distraction free theme, with search and a' ' lot more unique features, using Jinja2 and Bootstrap' }] To configure the projects' list title, set PROJECTS_TITLE variable in your Pelican configuration. Its default value is \"My Projects\". For example, PROJECTS_TITLE = \"Related Projects\"","tags":"Components","url":"https://dvesti.github.io/Pelican/2019/07/01/projects-list/","loc":"https://dvesti.github.io/Pelican/2019/07/01/projects-list/"},{"title":"Home Page — Write About Me","text":"Define LANDING_PAGE_TITLE \" About Me\" section works only if you have defined LANDING_PAGE_TITLE in your Pelican configuration. Read here. To write about me section, create a page. See Pelican documentation on how to create a page. The slug of the page should be landing-page-about-hidden and status should be hidden . Example, --- author : Talha Mansoor title : What Is Elegant layout : page date : 2019-01-14 7:30:47 +0100 status : hidden slug : landing-page-about-hidden --- The content of this will become your \"About me\" section, and title will become the heading. You can write content in any markup language, like Markdown, AsciiDoc or reST, as long as Pelican has supports it. Deprecated Warning: Legacy Variable LANDING_PAGE_ABOUT was available in Elegant V2.5.0. It has since been passed out in favour of landing-page-about-hidden . The new method lets you write \"About Me\" in your favourite markup language. You can write up your own About me section using LANDING_PAGE_ABOUT variable in your configuration. It is a dictionary that has two keys title and details . Value of title is displayed in the header of the home page, like in the above example it is \"I design and build software products for iOS and OSX \". details is the text that appears under \"About me\" heading. You can add raw HTML to it.","tags":"Components","url":"https://dvesti.github.io/Pelican/2019/07/01/write-about-me/","loc":"https://dvesti.github.io/Pelican/2019/07/01/write-about-me/"},{"title":"Home Page — Write Welcome Message","text":"Define LANDING_PAGE_TITLE in your Pelican configuration. It will be displayed as the welcome heading. For example, LANDING_PAGE_TITLE = \"I design and build software products for iOS and OSX\"","tags":"Components","url":"https://dvesti.github.io/Pelican/2019/07/01/write-welcome-message/","loc":"https://dvesti.github.io/Pelican/2019/07/01/write-welcome-message/"},{"title":"Home Page — Recent Articles List","text":"Recent articles show last RECENT_ARTICLES_COUNT whose default value is 10. It also has a link to \"all posts\", which takes user to the archives page.","tags":"Components","url":"https://dvesti.github.io/Pelican/2019/07/01/recent-articles-list/","loc":"https://dvesti.github.io/Pelican/2019/07/01/recent-articles-list/"},{"title":"Comments — Thread ID","text":"Most Pelican themes pass article URL to Disqus as the Disqus identifier . This puts you at a disadvantage. If you are forced to change URL of an article you will lose Disqus discussion for that article because Disqus identifier for the article will change too. Elegant offers you comment_id property that you can set in your article metadata. Set it to any unique string you want. It won't be effected by the article URL . If you choose not to use comment_id , Elegant passes article URL to Disqus. Legacy Variable In previous versions, we had disqus_identifier . Though Elegant is backward compatible but we recommend you to change it to comment_id .","tags":"Connecting With Your Readers","url":"https://dvesti.github.io/Pelican/2019/06/30/comments-thread-id/","loc":"https://dvesti.github.io/Pelican/2019/06/30/comments-thread-id/"},{"title":"Version 2.5.0","text":"We plan to add support for other comment providers besides Disqus. This release is first step towards it. In this release we also resolved an issue in our automated release process. From now onwards, all new releases will happen automatically with minimum human intervention. 2.5.0 (2019-06-30) Features comments: replace disqus_identifier with comment_id ( 3aa4e24 )","tags":"Release Notes","url":"https://dvesti.github.io/Pelican/2019/06/30/version-2-5-0-release-notes/","loc":"https://dvesti.github.io/Pelican/2019/06/30/version-2-5-0-release-notes/"},{"title":"Footer — Show Your Host Information","text":"You can optionally display the host of your website in the footer. To do so, define a dictionary HOSTED_ON in your Pelican configuration. It has two keys, name : mandatory. Value type is string url : optional. Value type is string For example, HOSTED_ON = { \"name\" : \"Netlify\" , \"url\" : \"https://www.netlify.com/\" } It will appear in the footer as If url is present then Elegant will add link to your host in the footer with nofollow attribute. Otherwise Elegant will display the name without any link.","tags":"Components","url":"https://dvesti.github.io/Pelican/2019/06/30/show-host-information/","loc":"https://dvesti.github.io/Pelican/2019/06/30/show-host-information/"},{"title":"Version 2.4.0","text":"We focused on making changes in the footer of the site. This release is our first step towards using modern CSS properties like flexbox and grid for layout. We have also automated the release process. This is the first of many release that is published by the release bot. 2.4.0 (2019-06-30) Features footer: make external links Nofollow ( 137a02a ) footer: move site subtitle to the center ( b5baa11 ) footer: open exit links in new tab ( 8fd9f28 ) footer: optionally show the host information ( 9de2dab ) footer: powered by message is always aligned to the right ( 5e47b7c ) footer: remove fixed height by using flexbox for sticky footer ( d9d84e1 ) footer: use flexbox instead of list for items in the footer ( bef7db9 ) onelink: add Amazon Affiliate Disclosure ( cbfa6ac )","tags":"Release Notes","url":"https://dvesti.github.io/Pelican/2019/06/30/version-2-4-0-release-notes/","loc":"https://dvesti.github.io/Pelican/2019/06/30/version-2-4-0-release-notes/"},{"title":"Version 2.3.0","text":"We have been busy making changes in our infrastructure. Our end goal is to automate as much as possible. We are half way there. With this release, every pull request is deployed by Netlify. We no longer have to merge the pull request locally and test it first, before approving it. Anyone can preview the pull request right from the Github. We are also planning to automate our release process. We have made several changes in our contribution process to ensure that we are compatible with the automate release requirements. Our next release will be published by a bot. Project Management Documentation is hosted at https://elegant.oncrashreboot.com/ Host and build documentation using Netlify elegant.oncrashreboot.com domain is the final home of documentation. It shall never change Delete github pages and related repositories Features New: FontAwesome updated to version 4.7.0 New: Photos plugin support for photo gallery creation New: Lightbox support for Photos plugin Fixed: Amazon One Link div is in the header Fixed: Separated claims for Google and Bing into individual includes Documentation New: Help article on claim Google and Bing CI New: Enable deploy previews for every pull request New: Add spell check for every pull request, and master and next branches New: Add git hooks to format the code New: Add commit Zen support New: Add html5validator, which along with w3c_validator, makes for two html validation tools in the CI New: Improve CI build times Remove: peru for downloading plugins and themes New: Add pull request template","tags":"Release Notes","url":"https://dvesti.github.io/Pelican/2019/06/29/version-2-3-0-release-notes/","loc":"https://dvesti.github.io/Pelican/2019/06/29/version-2-3-0-release-notes/"},{"title":"Claim website on Google, Yandex and Bing","text":"For submitting a website and sitemap to Google Search Console or Bing Webmaster tools or Yandex Webmaster we've to consider some steps. One of those steps is to claim the website ownership. Several approaches are available: Create a specific file on the root folder of the website Use a DNS Record Insert a <meta> TAG in pages to claim it. Usually both DNS record or uploading files make things more complicated (require DNS setup, or configure pelican to upload static file to path, etc). Pelican-Elegant has simplified this by including support for the <meta> TAG being inserted if the values are defined in pelicanconf. Use the following variables to insert the relevant <meta> in the document headers: CLAIM_GOOGLE CLAIM_BING CLAIM_YANDEX Each one of those should be filled according to the values provided by Google/Bing on their respective websites for webmasters: Google Search Console Bing Webmaster tools Yandex Webmaster Once configured and when site is regenerated, the header should be there.","tags":"Analytics, SEO and SMO","url":"https://dvesti.github.io/Pelican/2019/06/27/website-claim/","loc":"https://dvesti.github.io/Pelican/2019/06/27/website-claim/"},{"title":"Version 2.2.0","text":"We are planning to make several improvements in our infrastructure, which includes pull request previews and automated releases. In this regard, we have removed our standalone documentation repository from Github and moved it inside Elegant source code repository. You are going to see the result of this change in our next couple of releases. New: TipueSearch updated to 7.1 New: Use PROJECTS_TITLE to customize project list title. (default My Projects) Changed: Reading Time is displayed only if it is greater than READING_TIME_LOWER_LIMIT variable (default 4 min) Changed: Project documentation has been moved inside the Elegant repository Removed: Google Plus","tags":"Release Notes","url":"https://dvesti.github.io/Pelican/2019/06/09/version-2-2-0-release-notes/","loc":"https://dvesti.github.io/Pelican/2019/06/09/version-2-2-0-release-notes/"},{"title":"Creating a Photo Gallery Article","text":"In many cases, when an author writes an article and includes an image, there is a specific reason that the image needs to be in that exact place. A good example of this is the image at the end of this section, specifically part of this first section to give an early visual on what visual change is contained within the article. However, in some cases, the author wishes to provide a bit of preamble to a series of pictures, and then wants those pictures to be displayed with little effort. This action is most frequently performed when an author wants to share a series of photos on a given subject, similar to how they would display them in a brick and mortar art gallery. Elegant provides for a simple, yet effective photo gallery that displays thumbnails, one for each member of a set of images. These sets of images are defined by specifying a directory containing the set of images to present to the reader. If that reader is then interested in viewing one or more of the full images, clicking on the respective thumbnail creates a window the size of the browser to display the image in. That window has a number of simple controls, such as a close button, a previous image button and a next image button. Here is an example of what the Image Gallery section of such an article may look like: Note that the photo gallery itself will be placed at the end of any text presented for the article. Configuration To enable the Photo Gallery plugin, add photos to the PLUGINS configuration variable in your Pelican configuration. PLUGINS = [ 'photos' ] Note The photos plugin requires the Python pillow package to be installed. Pelican on Windows If you are running Pelican on a Windows machine, include the following configuration in your pelicanconf.py file: PHOTO_RESIZE_JOBS = - 1 Due to known issues in the Windows implementation of Python dealing with multiprocessing, a function being called within a multiprocessing context must be written to a specific pattern. Currently, the Photo Plugins has not been written to that pattern. Setting the PHOTO_RESIZE_JOBS configuration variable to -1 circumvents this issue by forcing the photo processing code to work in debug mode on a single thread without invoking any of the multiprocessing code. Article Metadata Once the configuration for Photo Gallery is enabled in the configuration file, using this feature for a given article requires that the article contains the gallery metadata field value. The text assigned to the gallery metadata field is the location of the directory where the images to be displayed resides. This location is relative to the article in which the gallery metadata field is placed. gallery : { filename } ../gallery-source/dragondance In the above example, the actual directory containing the images to display is the dragondance directory. While not specified in the example, the directory articles and the directory gallery-source are at the same directory depth, one directory to contain articles and one directory to contain galleries. By that convention, the article containing the gallery metadata is located in the the articles directory. Therefore, the path to the directory containing the dragondance directory is ../gallery-source/ . Together, the entire path to the dragondance directory from the article becomes ../gallery-source/dragondance . Photo Gallery Titles Titles for a photo gallery are displayed in a large font directly above the first row of the photo gallery. To specify the title for a gallery, add the required title to the metadata in the gallery metadata field within curly braces (‘{‘ and ‘}') as follows: gallery : { filename } ../gallery-source/dragondance{Dragon Dance} Multiple Photo Galleries in the Same Article Multiple photo galleries can be display, in order, within a single article. This is accomplished by specify a comma separated list of photo galleries to display in the gallery metadata field. For example: gallery : { filename } ../gallery-source/dragondance{Dragon Dance}, {filename}../gallery-source/hamsterdance{Hamster Dance} will display the title Dragon Dance , the Dragon Dance photo gallery, the title Hamster Dance , and finally the Hamster Dance photo gallery. The title of the specific photo gallery is not required, but when including multiple galleries, is often desired. Advanced Configuration Warning Processing a quantity of photos in the 10,000s range can take multiple hours to complete. To reduce the effort needed to publish photo galleries, the Photo plugin will only process images if the output file is not already present in the destination directory. For more information, please refer to the Caching Image Processing . Using the above configuration, a photo gallery will be added to the end of the article containing the gallery metadata using default settings. For additional ways to use photo galleries and for modifications to those default settings, please consult the sibling article on Advanced Configuration .","tags":"Supported Plugins","url":"https://dvesti.github.io/Pelican/2019/06/09/how-to-use-photos-plugin/","loc":"https://dvesti.github.io/Pelican/2019/06/09/how-to-use-photos-plugin/"},{"title":"Advanced Configuration for an Image Gallery Article","text":"Introduction This article continues the documentation of the Photo Gallery configuration documented in the article Creating a Photo Gallery Article . While getting started with a default photo gallery is relatively easy (one configuration variable and a metadata field per article), enabling some of the more advanced features requires a little more effort. This effort will allow for the inclusion of single gallery photos into articles and the fine tuning of the image transformations used to render the photos for the photo galleries and articles. Together these changes will give you the power to customize your photo gallery to your requirements. Including Gallery Photos in Articles Prior to including single gallery photos in articles, the PHOTO_LIBRARY configuration variable must first be set to the full path of the directory containing all of the galleries. For example, in the previous article, Creating a Photo Gallery Article , the gallery was added to the article as follows: gallery : { filename } ../gallery-source/dragondance Assuming that you have installed a standard installation of Pelican in the directory /home/stuff/blog-content and inferring from the above metadata that all photo galleries are located in the content/gallery-source directory, the full path to the galleries should be as follows: PHOTO_LIBRARY = '/home/stuff/blog-content/website/content/gallery-source' Adding a Single Photos to an Article Once the above configuration has been completed, add a photo into the body of an article using the following format: {photo}folder/image.jpg . The {photo} part of the format calls out this image as part of a gallery, and instructs the Photos plugin to resize a photo specifically for use in articles. The folder part refers to the folder representing the gallery, and the image.jpg is the filename of the photo within the folder directory. For example, say you want to highlight one of the photos, photo-1.jpg , that was contained within the dragondance gallery presented in your article. To include it in a Markdown article, add the following text to the article: ! [ first image ]({ photo } dragondance / photo - 1. jpg ) In addition, using the prefix {lightbox} instead of {photo} will cause the thumbnail of the photo to be displayed in the article. Clicking on the thumbnail will bring up the full sized image from the photo gallery, similar to how it was displayed in the photo gallery. Modifying Image Display in Galleries There is a small amount of configuration that is available to modify how a single photo is displayed in the galleries. These modifications include specifying captions for one or more photos, specifying EXIF information for one or more photos, and specifying one or more photos to not display as part of the gallery. All three of these modifications are controlled by text files that are located in the same source directory as the photos. These text files provide extra information that is used when the article containing the specified photo gallery is being generated. For the first two choices, there are two distinct files: exif.txt and captions.txt . In both cases, the file format is simply the name of the image, a colon, and the information to associate with the photo. For example, the information in the exif.txt may be: best.jpg: Canon EOS 5D Mark II - 20mm f/8 1/250s ISO 100 and the information in the captions.txt file may be: best.jpg: My best photo ever! How lucky of me! Elegant will display both of these pieces of information at the bottom of the popup for an individual image. To remove keep the photo file in a gallery, but not show it as part of the gallery, the blacklist.txt file is used. Even simpler than the previous two files, the file format is simply the name of the photo to exclude, one photo to a line. For example, to keep the file this-file-will-be-skipped.jpg in the gallery directory but not display it as part of the gallery, the blacklist.txt file would look like this: this-file-will-be-skipped.jpg Caching Processed Images To reduce the need to reprocess images to fit into the gallery, article, and thumbnail sizes, the Photo plugin only processes images if the output file is not already present in the destination directory. As such, to apply any configuration changes to images that have already been processed, their destination images need to deleted from the relevant directories under the photos directory from the Pelican output. As both of the following sections change configuration variables that affect how the images are processed, this note on caching applies to any changes of configuration variables specified in the following sections. Advanced Configuration Values The definitive list of the values and their defaults is located on the Photos Plugins webpage. The definitive list has been pared down, tested, and documented with specific focus on the Elegant theme. Testing was performed using the list from the Photos Plugin webpage along with the source code for the Photos Plugin. Any significant difference between the behavior documented below and the definitive list is usually attributed to differences between the source code and the documentation for the Photos Plugin. As a decent part of this information is presented after testing and research, please feel free to contact us if you see different behavior than is documented here. Configuration Name Default Value Description PHOTO_GALLERY (1024, 768, 80) Three attributes, describing the maximum width, the maximum height, and the quality of the resized image. The specific set of attributes applies to the maximum size of the photo displayed when the reader clicks on a gallery's thumbnail image in the article. Note that the quality of the resized image only applies to JPG images. PHOTO_ARTICLE (760, 506, 80) The same attributes as PHOTO_GALLERY , but for the size of a photo from a gallery used in an article. PHOTO_THUMB (192, 144, 60) The same attributes as PHOTO_GALLERY , but for the size of the thumbnails used to show the contents of the gallery. PHOTO_SQUARE_THUMB False This setting controls whether or not the thumbnails retain their aspect ratio when resized. If this setting is True , the thumbnails will not retain their aspect ratio and will be cropped to fit into the rectangle defined by the PHOTO_THUMB configuration variable. PHOTO_RESIZE_JOBS 1 Number of resize jobs to be run in parallel. If installed on a Windows machine, read this . PHOTO_WATERMARK True Add a watermark to all photos in articles and pages. The watermarks added are controlled by the PHOTO_WATERMARK_TEXT and PHOTO_WATERMARK_IMG configuration variables described below. Note that if both are specified, both will be used. PHOTO_WATERMARK_TEXT SITENAME Text to use for the watermark. PHOTO_WATERMARK_TEXT_COLOR (255, 255, 255) Color of the text used for the watermark. PHOTO_WATERMARK_IMG '' Full path to the image to use as a watermark. PHOTO_WATERMARK_IMG_SIZE False Size to apply to the watermark image, expressed as (width,height) . JPG Specific EXIF Configuration Values Note The photos plugin requires the Python piexif package to provide control over any EXIF information in the images. Configuration Name Default Value Description PHOTO_EXIF_KEEP False Keep the EXIF information from the input photo. PHOTO_EXIF_REMOVE_GPS False Remove any EXIF GPS information from the photos. PHOTO_EXIF_AUTOROTATE True Use the EXIF orientation field to determine how to rotate the photo so all photos are in a standard orientation. PHOTO_EXIF_COPYRIGHT False If not False and no existing copyright information is provided in the image, attach an author and license to the file. Choices include: - COPYRIGHT , CC0 , CC - BY - NC - ND , CC - BY - NC - SA , CC - BY , CC - BY - SA , CC - BY - NC , CC - BY - ND PHOTO_EXIF_COPYRIGHT_AUTHOR SITENAME If PHOTO_EXIF_COPYRIGHT is not False and no copyright author is present in the image, use this value as the author.","tags":"Supported Plugins","url":"https://dvesti.github.io/Pelican/2019/06/09/how-to-use-photos-plugin-advanced/","loc":"https://dvesti.github.io/Pelican/2019/06/09/how-to-use-photos-plugin-advanced/"},{"title":"How to use Heap Analytics","text":"the box. This articles describes how to set it up. Keywords: Elegant supports the popular web tracking service, Heap Analytics . From your Heap console , navigate to Settings → Projects . You need to copy the Project ID you want to log to. Set HEAP_ANALYTICS in your configuration with this value. HEAP_ANALYTICS = 1234567890 That's it. Elegant will take care of the rest.","tags":"Analytics, SEO and SMO","url":"https://dvesti.github.io/Pelican/2019/03/31/how-to-use-heap-analytics/","loc":"https://dvesti.github.io/Pelican/2019/03/31/how-to-use-heap-analytics/"},{"title":"Version 2.1.1","text":"New: Update code to be compatible with Jinja2 (v2.9) In case you are stuck with Jinja2 (< V2.9) then you can use Elegant version 2.1.0 . Refer to following issues for details. Issue #162 Issue #202","tags":"Release Notes","url":"https://dvesti.github.io/Pelican/2019/02/10/version-2-1-1-release-notes/","loc":"https://dvesti.github.io/Pelican/2019/02/10/version-2-1-1-release-notes/"},{"title":"Version 2.1.0","text":"Features New: Disable comments per article basis by setting article.comments to false New: Add post_stats plugin support New: Add FreeLists support New: Add itemscope tag to <article> Fixes Fix: RSS feed does not work on Pelican 4 CI Improve tests","tags":"Release Notes","url":"https://dvesti.github.io/Pelican/2019/02/10/version-2-1-0-release-notes/","loc":"https://dvesti.github.io/Pelican/2019/02/10/version-2-1-0-release-notes/"},{"title":"Version 2.0.0","text":"Introduction With more than 4 years in the making, this release started \"better late then never\", but it turned out to so much more than that. With the community spark re-ignited , this has become the biggest release since probably 1.0. And as such a very worthy release to carry the 2.0 crown. Elegant v 2.0 is finally here! A lot has happened since the last release of elegant theme and a great effort was also done and new steps for the future have been set as the way forward. V2 is not only a new set of bytes but also features and probably, the most important step has been evolving elegant into a community effort. Talha, who created the elegant theme, helped this movement by setting a new home for the repository and the documentation as well as adding some next steps towards evolving the theme faster in the future by removing some dependencies. A brave set of collaborators have helped shape this future via new issue creation, review of pending pull requests and defining how the community and project should continue. This has been noticed in the last months activity in the repository, the opened issues, and zapping the old ones not to lose any contribution, either from their original authors or resubmitting them on their behalf. A lot of things are remain to be done that will allow pelican 4.0 compatibility, removal of legacy code inherited from bootstrap, etc Don't hesitate to give Elegant a new try, testing the new version or experimenting it at our brand new documentation/demo site at https://pelican-elegant.github.io . And of course let us know if something is not as you would expect or wish so that we can have Elegant become your pelican theme. Thanks to all our contributors mentioned either at Authors document https://github.com/Pelican-Elegant/elegant/blob/master/ AUTHORS .md or at https://github.com/Pelican-Elegant/elegant/graphs/contributors Stats 119 issues were closed in the 2.0 release – an impressive number, even if we take into account that many of the bugs were of an organizational nature, as Pelican Elegant has changed the development and governance model (more on that in a separate post ). Compare that to 1.3 release , which consisted of 4 issues, or the total amount of closed issues so far, which amount to 133. Up until 1.3 release , the only person to commit was Talha Mansoor with 357 commits. From 1.3 release until the 2.0 release there were 316 new commits in total and divided as follows (excluding merge commits): Talha Mansoor – \"talha131\" : 264 commits [Pablo Iranzo Gómez – \"iranzo\"][iranzo]: 8 commits [Calf Zhou – \"calfzhou\"][calfzhou]: 7 commits Andrew Wegner – \"AWegnerGitHub\" : 6 commits [Matija Šuklje – \"silverhook\"][silverhook]: 5 commits [Jeremy Thurgood – \"jerith\"][jerith]: 1 commit Mobile Developer – \"0x8BADFOOD\" : 1 commit Leo Torres – \"leotrs\" : 1 commit [Gan Shen – \"gshen42\"][gshen42]: 1 commit [Gert van Dijk – \"gertvdijk\"][gertvdijk]: 1 commit Miguel Lechón – \"debiatan\" : 1 commit As we can clearly see, by any metric this is a huge milestone for Elegant. [ashwinvis]: https://ashwinvis.github.io/ [calfzhou]: http://gocalf.com [iranzo]: https://iranzo.github.io/ [silverhook]: https://matija.suklje.name [jerith]: http://rhetoric.jerith.org/ [gshen42]: https://gshen42.github.io/ [gertvdijk]: https://blog.g3rt.nl/ Highlights Most issues belonged to bugs and dependency updates, amongst the biggest: support for HTTPS out of the box by making the links protocol agnostic fix for search to work again fix of accordion menus not opening up – fixes both issues with categories and comments fix of table of content much improved build speed support for Jinja 2.9 (and newer) But also new features were added. To list just a few: article summaries in recent posts added links to social networks (if so desired) support for several analytics providers support for the series plugin (instead of the deprecated multi_part plugin) non-English languages are now possible as default, as well as having translations of articles big steps towards full W3C compliance support of LaTeX as input format support for Disqus comments new website and documentation (more on that in a separate post ) For a full CHANGELOG , see below. Full CHANGELOG Below is the full CHANGELOG : Version 2.0 Link to your social profiles Upgraded to Twitter Bootstrap 2.3.2 Upgraded to Tipue Search 3.1 Support for custom.css Stat Counter Analytics support Google Universal Analytics support Support for custom icons for social profiles Support for Pelican (>3.3) new metadata modified Support for Social Media Tags Support for Google Authorship Translations support article.comments_intro that overrides COMMENTS_INTRO . Now you can define article specific comments introduction Add Disqus comments to Pages All customizable variables consolidated in a single _defaults.html , making it easier for you to customize or even localize the theme Adds author blurbs at the end of the article Performance 4x faster output Reduce number of HTTP requests using assets plugin Shortcut icons, like favicon, are disabled by default. Set USE_SHORTCUT_ICONS to true to enable it Visual Style Email newsletter subscriber form style matches rest of the theme Article images have a visible border Block quotes have a quote icon instead of a thick line on left Article's paragraph font size is bigger, for better readability Remove unnecessary padding in sidebar's tag list Archives page and recent posts on home page have better presentation Time stamps in categories and tags pages are justified Line number in code block is hidden on tablets and phones to save space for content More sizes of image for Apple Touch icons Fixed: Nested lists have different font sizes Fixed: CSS style rules for literal block in reST is missing Fixed: Long lines in code block will wrap to next line Fixed: Code block will not play nice with line numbers Fixed: Subscribe button changes its size on smaller screens Fixed: Articles under tag heading on tags page are not sorted Fixed: URL scheme for blogs which are not published to the root folder Fixed: Footer is always under the fold even on smaller length web pages Fixed: Site Name and top navigation menu move to left on wide displays Fixed: Page link is not active in the navbar if SAVE_PAGE_AS is not set to default Plugins Use neighbor plugin to show next and previous articles Use assets plugin to minify CSS and JS files Support for share_post plugin Support for related_posts plugin Support for multi_part plugin Behavior Search results link open in the same window, which is consistent with internet search engines Comments section message changes when user toggles it Fixed: Clicking Search button in 404.html does not trigger search","tags":"Release Notes","url":"https://dvesti.github.io/Pelican/2019/02/10/elegant-2-0-0-release-notes/","loc":"https://dvesti.github.io/Pelican/2019/02/10/elegant-2-0-0-release-notes/"},{"title":"Comments — Disable Comments in an Article","text":"If you remove your comment service configuration, say you set DISQUS_SITENAME to empty string, then comments will disappear from all the articles. Sometimes you want to disable comments on selected articles. In which case, you can set comments variable in the article metadata to false . Here is an example, Title : Disable Comments date : 2019-01-12 16:29 comments : false Category : Commenting","tags":"Connecting With Your Readers","url":"https://dvesti.github.io/Pelican/2019/01/12/disable-comments-per-article/","loc":"https://dvesti.github.io/Pelican/2019/01/12/disable-comments-per-article/"},{"title":"Quickly get a GitHub hosted blog with Pelican, Elegant with little setup steps.","text":"Introduction We're using automation for some of the aspects of Elegant development, but one of the issues for users trying to setup a new site with Pelican is to download plugins, theme, doing configuration, etc. Based on this feedback, a new ‘blog-o-matic' approach has been tested: The approach Blog-o-Matic , uses several discussed topics so far: Github and GH Pages for hosting the source and the website Travis- CI .org for automating the update and generation process ‘ Pelican' for static rendering of your blog from the markdown or AsciiDoc articles ‘ Elegant' for the ‘Theme' peru for automating repository upgrades for plugins, etc The setup process is outlined at its README .md and just requires a few steps to setup that, from that point, will allow you to get your website published each time you commit a new document to the content folder. You can also check the ‘generated' website after installation via https://iranzo.github.io/blog-o-matic How does it work under the hood? The repository, contains already the required setups and configurations for setting up a blog using github pages. It requires some manual steps like configuring authentication token in order for automation to ‘push' to github the ‘rendered webpage', plus enabling ‘Travis CI ' automation for doing that step. Check the updated README on Blog-o-Matic if you're interested in the setup, but thing is: Setup Repository contains already predefined Travis CI configuration A GH token is needed for Travis CI to push to the ‘master' branch that is used by github pages The token needs to be configured as environment variable in ‘travis-ci.org' which needs to be enabled for your repository Once this is done, all the automation is ready. Automation workflow The automation, on a new ‘commit' (new config, new article, whatever), that can be even done via github.com Web User Interface, will launch a set of tasks: Preparation Setup python environment (Pelican uses python) Install tool ‘peru' to sync from other repositories (for later syncing plugins, latest theme, etc) Launch the synchronization of themes, plugins etc (as defined in peru.yaml ) Validation Validate that web page builds ( make html ) Validate that it builds with publish configuration ( make publish ) Deployment Copy extra files to generated website Update the checked out git config to use https so that we can use the token defined in environment variable GHTOKEN Regenerate website and push to github Blog is ready! At this point, Travis CI will have built the blog with the sample content content/welcome.md . Keep adding new files to your new repository in the content/ folder and check the configuration settings in pelicanconf.py to customize your name, twitter, SEO , etc Bear in mind, that at this point you're using a regular Elegant setup with Pelican and some Pelican Plugins, so refer to peru.yaml for the URLs containing the files and extra information that might be helpful for you to learn on the features and customization possibilities. Enjoy your Elegant blog!","tags":"101 — Quick Start","url":"https://dvesti.github.io/Pelican/2019/01/11/quickly-get-a-github-hosted-blog-with-pelican-elegant-with-little-setup-steps/","loc":"https://dvesti.github.io/Pelican/2019/01/11/quickly-get-a-github-hosted-blog-with-pelican-elegant-with-little-setup-steps/"},{"title":"Elegant grows into a community-led project","text":"Adopting Bazar Model Talha Mansoor published the first version of Elegant in 2012. It grew in popularity in a short time, due to its clean and functional style. In November 2018, Matija Šuklje called Elegant's community into a discussion about the future of the theme . Response was immense. Talha was the first to support the proposal of changing the development model from a single-developer to a community-led project following the bazaar development model . He moved Elegant from a personal repository to a separate organization Pelican-Elegant , and added active community members to the team . This way, the bus factor of the project has greatly improved. New Governance Model Since the code base is now tended by more than one, team has put in place some basic rules of governance to avoid people stepping on each-others toes. We clarified the outbound and inbound licensing situation. We release Elegant (outbound license) under the MIT license and its documentation under the CC - BY -4.0 license. All code contributions are made directly under the \"Inbound=Outbound licensing model\". What it means is that, the license everyone contributes their code under (i.e. inbound license) is same as the license that the code is then released under to the general public. The contribution guidelines are also updated and should be easier to follow now. We have also started discussing how to vote on new features and other important decisions , which we will put into effect soon. New Documentation Website Any good project needs good documentation and deserves a good homepage. We decided to eat our own dog food and host Elegant documentation on an Elegant-themed Pelican instance. This serves three purposes. One, hosts documentation, two, showcases Elegant features, and third, a testing ground to try out new ideas. This resulted in elegant.onCrashReboot.com . Future releases As we write this blog post, the discussion on how to tackle future releases is still on-going. Right now, the discussion seems to go in the line of: 2.0 – All those fixes and features that do not require creating Pelican plugins or changes in Pelican code. This release will have updated documentation too. 2.1 – Make theme compatible with Pelican 4. 3.0 – Next generation Elegant – the biggest goal is to remove dependency on Bootstrap, to make it easier to maintain. 3.0.0 should have feature parity with 2.0.0.","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2019/01/05/community-led-project/","loc":"https://dvesti.github.io/Pelican/2019/01/05/community-led-project/"},{"title":"Amazon OneLink Support","text":"Elegant supports Amazon OneLink , so that you may monetize your traffic using affiliate links. Visit Amazon website and create your OneLink account. Amazon will provide you a code snippet similar to following, < div id = \"amzn-assoc-ad-$UUID\" ></ div > < script async src = \"//z-na.amazon-adsystem.com/widgets/onejs?MarketPlace=US&adInstanceId=$UUID\" ></ script > Pay close attention to the amzn-assoc-ad- part. The value following it is your Amazon OneLink id. In your pelican configuration, preferably in the file publishconf.py , set AMAZON_ONELINK to your Amazon OneLink id, for example, AMAZON_ONELINK = \"b63a2115-85f7-43a9-b169-5f4c8c275655\" When the site is generated, $UUID in the snippet above is substituted with your id. Thus, ensuring that correct referral code is passed to the script. Now, when international visitors of your site click on a link on your site to buy from Amazon, they are redirected to their local or nearest Amazon market place. For example, original link (Python book): This is an optional feature. If you do not set the variable then Amazon OneLink script is not added to the rendered output. You, as a content creator, should be aware of GDPR or other regulations. Section 5 of the Operating Agreement for Amazon Associates states that you need to disclose your affiliation with Amazon and that you earn from qualifying purchases. To conform to this rule in the agreement, Elegant automatically adds the disclaimer in the footer of the website if AMAZON_ONELINK variable is set. It looks like this,","tags":"Monetizing Your Blog","url":"https://dvesti.github.io/Pelican/2019/01/02/amazon-onelink/","loc":"https://dvesti.github.io/Pelican/2019/01/02/amazon-onelink/"},{"title":"Warnings and admonition boxes","text":"Sometimes you want to draw your reader's attention to an important piece of information. You can do this using admonitions. Below are a few examples of how to do this, and the various styles that are available in Elegant. Set up To use admonitions within our Markdown, we need to enable support for them first. In pelicanconfig.py find your MARKDOWN dictionary. Add the following line to the dictionary (and ensure the previous line ends with a comma so that the dictionary is valid). 'markdown.extensions.admonition': {}, That's it! Now your site will support Markdown admonitions. Types of admonitions There are several styles available and Elegant supports the recommended values of: attention caution danger error hint important note tip warning Examples Let's see some examples! Default Danger, Error You can use either danger or error to get a red admonition box. !!! danger This is a danger or error admonition Danger This is a danger or error admonition Default Attention, Caution, Warning An attention , caution or warning admonition will be yellow. !!! warning This is an attention, caution or warning admonition Warning This is an attention, caution or warning admonition Default Important, Note Use important or note to get a green admonition box. !!! important This is an important or note admonition Important This is an important or note admonition Default Hint, Tip Use either hint or tip to get a blue admonition box. !!! hint This is a hint or tip admonition Hint This is a hint or tip admonition Custom Titles Admonitions can have custom titles. When the default examples are used, the titles of each box are the same as the admonition type. This isn't always what you want. If you want to use a custom title, you pass the title in double quotes after the type of admonition you are utilizing. !!! hint \"Use double quotes to change the title\" This admonition box contains a custom tile because I placed it in double quotes after the `hint`. Use double quotes to change the title This admonition box contains a custom tile because I placed it in double quotes after the hint . No title There are times when you don't need a title in your boxes. This can be done by passing an empty string ( \"\" ) after the admonition type. !!! important \"\" This box doesn't require a title, but is still an `important` admonition and will be highlighted as such. This box doesn't require a title, but is still an important admonition and will be highlighted as such.","tags":"Components","url":"https://dvesti.github.io/Pelican/2018/12/18/warnings-admonition/","loc":"https://dvesti.github.io/Pelican/2018/12/18/warnings-admonition/"},{"title":"Triggering a travis-ci build on another repository","text":"Outdated Elegant no longer uses the procedure described in this article Introduction After setting up build automation we also wanted it not to happen only when updating the documentation repository. Besides hosting documentation, Elegant website also serves as a live demo of the current release. This meant, the website should be regenerated and updated every time when a documented is added or edited, and also when Elegant theme is updated. Github and Travis doesn't offer dependent builds out of the box, so the trick goes to ‘signal' via a github token to trigger a Travis build. The technical solution The approach goes via tweaking the ‘test validation' .travis.yaml and adding some more steps: The initial file (similar to the one in our previous article, but for running the ‘page build' with latest repository checkout) looks like: # Copyright (C) 2017, 2018 Pablo Iranzo Gómez <Pablo.Iranzo@gmail.com> language : python dist : trusty sudo : required python : - \"3.5\" # prepare and move data for execution before_install : - pip install -U pip - pip install -U setuptools - pip install -r tests/requirements.txt - pip install -r tests/test-requirements.txt - pip install peru - mkdir -p tests/themes/elegant - mv templates tests/themes/elegant/ - mv static tests/themes/elegant/ - cd tests && peru sync script : - pelican content/ -o output/ Is then modified to add: before_script : - npm install travis-ci after_success : - node trigger-build.js This installs Travis- CI utilities and runs a custom script ‘trigger-build.js' with node, which in turn actually triggers Travis build. The script, downloaded from Kamran Ayub blog has been edited to specify the ‘repository' we will trigger and the name of the environment variable containing the token: # ! js var Travis = require ( \"travis-ci\" ); // change this var repo = \"Pelican-Elegant/documentation\" ; var travis = new Travis ({ version : \"2.0.0\" }); travis . authenticate ( { // available through Travis CI // see: http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci/ github_token : process . env . TRATOKEN }, function ( err , res ) { if ( err ) { return console . error ( err ); } travis . repos ( repo . split ( \"/\" )[ 0 ], repo . split ( \"/\" )[ 1 ]) . builds . get ( function ( err , res ) { if ( err ) { return console . error ( err ); } travis . requests . post ( { build_id : res . builds [ 0 ]. id }, function ( err , res ) { if ( err ) { return console . error ( err ); } console . log ( res . flash [ 0 ]. notice ); } ); }); } ); As you can see, in line 14, it grabs the github token from environment variable ‘ TRATOKEN ' that we've defined in Travis- CI environment for the build. This is similar to what we did in the documentation repository to push the built website to another repository. With this solution in place, when a new commit is merged on ‘master' branch on the ‘theme' repository ( elegant ) , Travis CI does get invoked to schedule a build on the documentation repository, thus, rendering the live website with latest templates.","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2018/12/11/travis-to-trigger-build-in-another-repository/","loc":"https://dvesti.github.io/Pelican/2018/12/11/travis-to-trigger-build-in-another-repository/"},{"title":"Travis- CI Automation for documentation website","text":"Outdated Elegant no longer uses the procedure described in this article Background Elegant theme for pelican has been undergoing a big change from individual-driven effort to community, as part of this, one of the tasks to accomplish, has been the decoupling from author blog to project site for documentation. As we wanted this process to be both automated and allowed us to demonstrate via dogfooding that the theme works and how it looks, the idea was to automate the rendering of pelican website with new documents. Under the hood Setting an automated build required several steps to be done: Get a GitHub token that could be used by Travis for pushing to a repository (and configure it in Travis environment variables for the repository in a variable named GITHUB_TOKEN ) run unit tests for validating new PR before merging configure Travis so that it downloads required dependencies in order to run pelican and then publish the generated web to the repository a GitHub pages enabled repository so that resulting files can be viewed as a webpage. One of the key pieces is a properly configured .travis.yaml like the one we started using: language : python dist : trusty sudo : required python : - \"3.5\" before_install : - pip install -U pip - pip install -U setuptools - pip install -r requirements.txt - pip install -r test-requirements.txt - pip install peru - peru sync - pip install tox script : - tox - make html after_success : - rm -rf .git/ - git init - git config user.name \"Travis CI\" - git config user.email \"travis@domain.com\" - git config --global push.default simple - git remote add origin https://${GITHUB_TOKEN}@github.com/Pelican-Elegant/pelican-elegant.github.io.git - make github Image setup So, from above file we do: language : python dist : trusty sudo : required python : - \"3.5\" Configure language as python Select distribution Confirm we require ‘sudo' access Configure python version as 3.5 All of this depends on Travis Image being used and their documentation Preparation of environment Now, we'll prepare the environment for our tests: before_install : - pip install -U pip - pip install -U setuptools - pip install -r requirements.txt - pip install -r test-requirements.txt - pip install peru - peru sync - pip install tox We do install pip, setuptools, repository and test requirements, peru and tox. Peru is used to grab additional dependencies for elegant (plugins, latest theme, etc) Actual tests This is really easy in our case: script : - tox - make html We run ‘tox' that allows to automate Python virtualenv and tests and then, use the Makefile from Pelican to build the site and tests plugins, etc If everything succeeds, we're ready for the next step (publishing) After tests passed All the environment setup and tests have succeed now, we do need to push the site ‘live' after_success : - rm -rf .git/ - git init - git config user.name \"Travis CI\" - git config user.email \"travis@domain.com\" - git config --global push.default simple - git remote add origin https://${GITHUB_TOKEN}@github.com/Pelican-Elegant/pelican-elegant.github.io.git - make github This piece does the final step, first removes info about the repository containing the actual documentation and allows us to initialize a new one, that we make it point towards the repository we're pushing (so that we keep separate actual website content from ‘rendered' website). In the final step, ‘make github' uses the Makefile provided with pelican to push the changes to the ‘master' branch of the target repository, that then, is ready to be served via github pages as a regular web server would do. Wrap up So, right now we've accomplished several things: We do use pelican in the same way that we'll do for our own website We do also have as a consequence, a ‘live' demo of latest master branch showcasing features We did automate publishing of webpage as soon as contributors send new articles and are approved for merge All requires no extra change to regular workflow as is the glue here putting together all the pieces. Let us know via an issue if any problem is spotted on the generated documentation website.","tags":"Contributing","url":"https://dvesti.github.io/Pelican/2018/12/07/travis-ci-and-doc-website/","loc":"https://dvesti.github.io/Pelican/2018/12/07/travis-ci-and-doc-website/"},{"title":"Add Author Blurbs to Your Articles","text":"On websites where the author of an article may vary, many sites include a quick blurb about the author with the article. This blurb will typically be at the start of the article or the end of the article, and provides extra information for readers on the author. Elegant provides this feature, adding a section for any recognized articles at the end of the article. Here are two examples of what the Author Blurbs may look like: Configuration To enable author blurbs for your articles, you need to define an AUTHORS configuration variable in your Pelican configuration. The AUTHORS configuration variable for the Elegant documentation website is specified as follows: AUTHORS = { \"Talha Mansoor\" : { \"url\" : \"https://www.oncrashreboot.com/\" , \"blurb\" : \"is the creator and lead developer of Elegant theme.\" , \"avatar\" : \"/images/avatars/talha131.png\" , }, \"Pablo Iranzo Gómez\" : { \"url\" : \"http://iranzo.github.io\" , \"blurb\" : \" opensource enthusiast and Lego fan doing some python simple programs like @redken_bot in telegram, etc\" , \"avatar\" : \"https://avatars.githubusercontent.com/u/312463\" , }, \"Jack De Winter\" : { \"url\" : \"http://jackdewinter.github.io\" , \"blurb\" : \"ever evolving, ever learning\" , }, } The value assigned to the configuration variable is a Python dictionary 1 containing one key-value pair for every author. The key for the key-value pair is the name of the author as you want it to appear at the end of the article. In the example, the three authors are \"Talha Mansoor\", \"Pablo Iranzo Gómez\", and \"Jack De Winter\". The value for each of the key-value pairs is another dictionary. Elegant specifically looks for these three keys in the each author's dictionary: url (string) URL to the author's homepage or profile blurb (string) Introduction of author avatar (string) URL to author's avatar image For the url and avatar values, there is no restriction on where the URL links to. In the above example, Talha's avatar URL is local, while Pablo's URL is remote. Article Metadata While the configuration for Author Blurbs is centralized in the configuration file, enabling this feature for a given article requires that the article contains either the author or authors metadata field values. If neither of these values are provided, the AUTHOR configuration variable will be used as a default. AUTHOR = 'Pablo Iranzo Gómez' The default AUTHOR configuration variable and the author metadata field both denote a single author. The authors metadata field denotes multiple authors using a comma separated list. For each author determined through in this manner, a check is performed against the AUTHORS configuration in the previous section on Configuration . If the author is found using a case-sensitive exact match, a blurb will be generated for that author. If the author is not found, it will be silently ignored. A good example of the authors metadata field is available by looking at the raw Markdown for this page. Authors : Talha Mansoor, Jack De Winter Common Mistake A frequent mistake is to define multiple authors, but assign the value to the author metadata field. This can happen easily if one author writes the original version of the article and another author updates or changes that article. This mistake causes Elegant to look for that single author using the entire text for that value. The correct way to do this is to use authors metadata field. For more information on Python dictionaries, refer to this comprehensive article on Python dictionaries . ↩","tags":"Supported Plugins","url":"https://dvesti.github.io/Pelican/2018/12/07/adding-author-blurbs/","loc":"https://dvesti.github.io/Pelican/2018/12/07/adding-author-blurbs/"},{"title":"Article redirection","text":"We might want to redirect a visitor to another URL or article. Ideally this is done via a .htaccess so that a proper 301 code is generated, but we might not have access to the web server configuration. In Elegant we've included a redirect slug in the yaml preamble that allows to specify a target URL , that will be load with a http-refresh: < meta http-equiv = \"refresh\" content = \"0;URL={{ article.redirect }}\" /> The actual code to define a redirection in an article is to include redirect in the yaml preamble: --- Title : Article redirection Slug : article-redirect redirect : https://pelican-elegant.github.io/ --- When the article loads, it will refresh to the new URL defined in redirect, allowing you to still provide search engines and users a way to get to the new article.","tags":"Advanced Features","url":"https://dvesti.github.io/Pelican/2018/11/30/article-redirect/","loc":"https://dvesti.github.io/Pelican/2018/11/30/article-redirect/"},{"title":"Newsletter — Add FreeLists","text":"Elegant shows a form to subscribe to your newsletter, above the fold, in the right section of every article. You need to put your FreeLists name in FREELISTS_NAME in your configuration file. To customize user experience you can also define, EMAIL_SUBSCRIPTION_LABEL , EMAIL_FIELD_PLACEHOLDER and SUBSCRIBE_BUTTON_TITLE The \"Notify me\" button you see in the sidebar of this page is an example of FreeLists subscription form. It links to Oracle database discussion list to demonstrate the function. Show FreeLists Form by default Just set FREELISTS_NAME variable. Hide FreeLists Form by default Unset FREELISTS_NAME variable. This is the default setting. Hide FreeLists Form by default. Show on Selected Set FREELISTS_NAME Set FREELISTS_FILTER to True This will hide FreeLists form on all pages. Now to show FreeLists form on selected posts, in article metadata set freelists_filter : off Show FreeLists Form by default. Hide on Selected Set FREELISTS_NAME Remove FREELISTS_FILTER or set it to False which is its default value This will hide FreeLists form on all pages. Now to hide FreeLists form on selected posts, in article metadata set freelists_filter : on","tags":"Connecting With Your Readers","url":"https://dvesti.github.io/Pelican/2018/07/05/add-freelists/","loc":"https://dvesti.github.io/Pelican/2018/07/05/add-freelists/"},{"title":"Создание новой Темы — English Creating a New Theme","text":"You can also close(false) or open(true) something for this content. P.S. comment can only be closed comment: false toc: false autoCollapseToc: true You can also define another contentCopyright. e.g. contentCopyright: \"This is another copyright.\" contentCopyright: ‘ See origin ‘ reward: false mathjax: false Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML , the bash command line, and that you are comfortable using Markdown to format content. I'll explain how Hugo uses templates and how you can organize your templates to create a theme. I won't cover using CSS to style your theme. We'll start with creating a new site with a very basic template. Then we'll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites. In this tutorial, commands that you enter will start with the \"$\" prompt. The output will follow. Lines that start with \"#\" are comments that I've added to explain a point. When I show updates to a file, the \":wq\" on the last line means to save the file. Here's an example: ## this is a comment $ echo this is a command this is a command ## edit the file $vi foo.md +++ date = \"2014-09-28\" title = \"creating a new theme\" +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \"2014-09-28\" title = \"creating a new theme\" +++ bah and humbug $ Some Definitions There are a few concepts that you need to understand before creating a theme. Skins Skins are the files responsible for the look and feel of your site. It's the CSS that controls colors and fonts, it's the Javascript that determines actions and reactions. It's also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors. You have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don't have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin. Your second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It's extra work, though, so why bother with it? The difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can't be customized without updating the templates and static files that it is built from. A skin created in themes/ , on the other hand, can be and that makes it easier for other people to use it. The rest of this tutorial will call a skin created in the themes/ directory a theme. Note that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won't need to update the site's configuration file to use a theme. The Home Page The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html. Site Configuration File When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML , YAML , or JSON . I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML , you'll need to translate my examples. You'll also need to change the name of the file since Hugo uses the extension to determine how to process it. Hugo translates Markdown files into HTML . By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file. Content Content is stored in text files that contain two sections. The first section is the \"front matter,\" which is the meta-information on the content. The second section contains Markdown that will be converted to HTML . Front Matter The front matter is information about the content. Like the configuration file, it can be written in TOML , YAML , or JSON . Unlike the configuration file, Hugo doesn't use the file's extension to know the format. It looks for markers to signal the type. TOML is surrounded by \" +++ \", YAML by \" --- \", and JSON is enclosed in curly braces. I prefer to use TOML , so you'll need to translate my examples if you prefer YAML or JSON . The information in the front matter is passed into the template before the content is rendered into HTML . Markdown Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file. Template Files Hugo uses template files to render content into HTML . Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it's published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use. There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template. Hugo uses its knowledge of the content to find the template file used to render the content. If it can't find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can't find a template, it will use the default template for the site. Please note that you can use the front matter to influence Hugo's choice of templates. Single Template A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template. List Template A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups. The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site. Partial Template A partial template is a template that can be included in other templates. Partial templates must be called using the \"partial\" template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template. Create a New Site Let's use Hugo to create a new web site. I'm a Mac user, so I'll create mine in my home directory, in the Sites folder. If you're using Linux, you might have to create the folder first. The \"new site\" command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file. $ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty. The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That's a topic for a different tutorial, so please ignore them for now. Generate the HTML For the New Site Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that's everything that's not content). Since we have an empty site, it won't do much, but it will do it very quickly. $ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \" --verbose \" flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \" INFO :\" or \" WARN :\" is present because we used that flag. The lines that start with \" WARN :\" are warning messages. We'll go over them later. We can verify that the command worked by looking at the directory again. $ ls - l total 8 drwxr - xr - x 2 quoha staff 68 Sep 29 16 : 49 archetypes - rw - r -- r -- 1 quoha staff 82 Sep 29 16 : 49 config . toml drwxr - xr - x 2 quoha staff 68 Sep 29 16 : 49 content drwxr - xr - x 2 quoha staff 68 Sep 29 16 : 49 layouts drwxr - xr - x 4 quoha staff 136 Sep 29 17 : 02 public drwxr - xr - x 2 quoha staff 68 Sep 29 16 : 49 static $ See that new public/ directory? Hugo placed all generated content there. When you're ready to publish your web site, that's the place to start. For now, though, let's just confirm that we have what we'd expect from a site with no content. $ ls - l public total 16 - rw - r -- r -- 1 quoha staff 416 Sep 29 17 : 02 index . xml - rw - r -- r -- 1 quoha staff 262 Sep 29 17 : 02 sitemap . xml $ Hugo created two XML files, which is standard, but there are no HTML files. Test the New Site Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \"server\" command. If it is successful, you will see output similar to the following: $ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it's on the line that starts with \"Web Server\"). If everything is working correctly, you should get a page that shows the following: index.xml sitemap.xml That's a listing of your public/ directory. Hugo didn't create a home page because our site has no content. When there's no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser. Let's go back and look at those warnings again. WARN : 2014 /09/29 Unable to locate layout: [index.html _default/list.html _default/si ngle . html ] WARN : 2014 /09/ 29 Unable to locate layout : [ 404 . html ] That second warning is easier to explain. We haven't created a template to be used to generate \"page not found errors.\" The 404 message is a topic for a separate tutorial. Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was \"index.html.\" That's only used by the home page. I like that the verbose flag causes Hugo to list the files that it's searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we'll cover later that explain the names and paths. For now, just remember that Hugo couldn't find a template for the home page and it told you so. At this point, you've got a working installation and site that we can build upon. All that's left is to add some content and a theme to display it. Create a New Theme Hugo doesn't ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes. We're going to create a new theme called \"zafta.\" Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS . In other words, ugly but functional. All themes have opinions on content and layout. For example, Zafta uses \"post\" over \"blog\". Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do. Create a Skeleton Use the hugo \"new\" command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out. $ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16 :49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16 :49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16 :49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16 :49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17 :02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16 :49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17 :31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17 :31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17 :31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17 :31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17 :31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17 :31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17 :31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17 :31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17 :31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype. Please take a minute to fill out the theme.toml and LICENSE .md files. They're optional, but if you're going to be distributing your theme, it tells the world who to praise (or blame). It's also nice to declare the license so that people will know how they can use the theme. $ vi themes / zafta / theme . toml author = \"michael d henderson\" description = \"a minimal working template\" license = \"MIT\" name = \"zafta\" source_repo = \"\" tags = [ \"tags\" , \"categories\" ] : wq ## also edit themes / zafta / LICENSE . md and change ## the bit that says \"YOUR_NAME_HERE\" Note that the the skeleton's template files are empty. Don't worry, we'll be changing that shortly. $ find themes/zafta -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme Now that we've got a theme to work with, it's a good idea to add the theme name to the configuration file. This is optional, because you can always add \"-t zafta\" on all your commands. I like to put it the configuration file because I like shorter command lines. If you don't put it in the configuration file or specify it on the command line, you won't use the template that you're expecting to. Edit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format. $ vi config.toml theme = \"zafta\" baseurl = \"\" languageCode = \"en-us\" title = \"zafta - totally refreshing\" MetaDataFormat = \"toml\" :wq $ Generate the Site Now that we have an empty theme, let's generate the site again. $ hugo --verbose INFO: 2014 /09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014 /09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014 /09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014 /09/29 Unable to locate layout: [ 404 .html theme/404.html ] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme's directory. Let's check the public/ directory to see what Hugo's created. $ ls - l public total 16 drwxr - xr - x 2 quoha staff 68 Sep 29 17 : 56 css - rw - r -- r -- 1 quoha staff 0 Sep 29 17 : 56 index . html - rw - r -- r -- 1 quoha staff 407 Sep 29 17 : 56 index . xml drwxr - xr - x 2 quoha staff 68 Sep 29 17 : 56 js - rw - r -- r -- 1 quoha staff 243 Sep 29 17 : 56 sitemap . xml $ Notice four things: Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn't create any pages. That's because it considers a \"page\" to be a file created directly from a content file. It doesn't count things like the index.html files that it creates automatically. The Home Page Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo's warning message shows that it looks for three different templates: WARN : 2014 / 09 / 29 Unable to locate layout : [ index . html _default / list . html _default / single . html ] If it can't find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed. When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page. $ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20 :21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17 :31 ./themes/zafta/layouts/index.html $ The Magic of Static Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are. Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo's opinion is that you'll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don't like that, you can change the directory names in your theme directory or jane delete them completely. Hugo's nice enough to offer its opinion, then behave nicely if you disagree. $ find themes / zafta - type d | xargs ls - ld drwxr - xr - x 7 quoha staff 238 Sep 29 17 : 38 themes / zafta drwxr - xr - x 3 quoha staff 102 Sep 29 17 : 31 themes / zafta / archetypes drwxr - xr - x 5 quoha staff 170 Sep 29 17 : 31 themes / zafta / layouts drwxr - xr - x 4 quoha staff 136 Sep 29 17 : 31 themes / zafta / layouts / _default drwxr - xr - x 4 quoha staff 136 Sep 29 17 : 31 themes / zafta / layouts / partials drwxr - xr - x 4 quoha staff 136 Sep 29 17 : 31 themes / zafta / static drwxr - xr - x 2 quoha staff 68 Sep 29 17 : 31 themes / zafta / static / css drwxr - xr - x 2 quoha staff 68 Sep 29 17 : 31 themes / zafta / static / js $ The Theme Development Cycle When you're working on a theme, you will make changes in the theme's directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy: Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I'll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes. Check the main Hugo site for information on using Git with Hugo. Purge the public/ Directory When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it. Note: If you're building on an SSD , you should ignore this. Churning on a SSD can be costly. Hugo's Watch Option Hugo's \" --watch \" option will monitor the content/ and your theme directories for changes and rebuild the site automatically. Live Reload Hugo's built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \"Wow, that's totally amazing.\" Development Commands Use the following commands as the basis for your workflow. ## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here's sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I've said this before, it's amazing. $ rm - rf public $ hugo server -- watch -- verbose INFO : 2014 / 09 / 29 Using config file : / Users / quoha / Sites / zafta / config.toml INFO : 2014 / 09 / 29 syncing from / Users / quoha / Sites / zafta / themes / zafta / static / to / Users / quoha / Sites / zafta / public / INFO : 2014 / 09 / 29 syncing from / Users / quoha / Sites / zafta / static / to / Users / quoha / Sites / zafta / public / WARN : 2014 / 09 / 29 Unable to locate layout : [404.html theme / 404 .html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in / Users / quoha / Sites / zafta / content Serving pages from / Users / quoha / Sites / zafta / public Web Server is available at http :// localhost : 1313 Press Ctrl + C to stop INFO : 2014 / 09 / 29 File System Event : [ \"/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\" : MODIFY | ATTRIB] Change detected , rebuilding site WARN : 2014 / 09 / 29 Unable to locate layout : [404.html theme / 404 .html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme's layout/ directory: index.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That's not a hard and fast rule (in fact, we'll break it a few times in this tutorial), but it is a good generalization. Make a Static Home Page Right now, that page is empty because we don't have any content and we don't have any logic in the template. Let's change that by adding some text to the template. $ vi themes/zafta/layouts/index.html <!DOCTYPE html> < html > < body > < p > hugo says hello! </ p > </ body > </ html > :wq $ Build the web site and then verify the results. $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html <!DOCTYPE html> < html > < body > < p > hugo says hello! </ p > </ html > Live Reload Note: If you're running the server with the --watch option, you'll see different content in the file: $ cat public/index.html <!DOCTYPE html> <html> <body> <p>hugo says hello!</p> <script>document.write('<script src=\"http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\"></' + 'script>')</script></body> </html> When you use --watch , the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it. Build a \"Dynamic\" Home Page \" Dynamic home page?\" Hugo's a static web site generator, so this seems an odd thing to say. I mean let's have the home page automatically reflect the content in the site every time Hugo builds it. We'll use iteration in the template to do that. Create New Posts Now that we have the home page generating static content, let's add some content to the site. We'll display these posts as a list on the home page and on their own page, too. Hugo has a command to generate a skeleton post, just like it does for sites and themes. $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast <nil> to map[string]interface{} $ That wasn't very nice, was it? The \"new\" command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there's a theme. For me, the workaround was to create an archetypes file specifically for the post type. $ vi themes/zafta/archetypes/post.md +++ Description = \"\" Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21 :53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21 :54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014 /09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014 /09/29 attempting to create post/first.md of post INFO: 2014 /09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014 /09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014 /09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014 /09/29 attempting to create post/second.md of post INFO: 2014 /09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014 /09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21 :54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21 :57 second.md $ cat content/post/first.md +++ Categories = [] Description = \"\" Tags = [] date = \"2014-09-29T21:54:53-05:00\" title = \"first\" +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \"\" Tags = [] date = \"2014-09-29T21:57:09-05:00\" title = \"second\" +++ my second post $ Build the web site and then verify the results. $ rm - rf public $ hugo -- verbose INFO : 2014 / 09 / 29 Using config file : / Users / quoha / Sites / zafta / config.toml INFO : 2014 / 09 / 29 syncing from / Users / quoha / Sites / zafta / themes / zafta / static / to / Users / quoha / Sites / zafta / public / INFO : 2014 / 09 / 29 syncing from / Users / quoha / Sites / zafta / static / to / Users / quoha / Sites / zafta / public / INFO : 2014 / 09 / 29 found taxonomies : map[string]string { \"category\" : \"categories\" , \"tag\" : \"tags\" } WARN : 2014 / 09 / 29 Unable to locate layout : [404.html theme / 404 .html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts: $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn't show the new content, either. We have to update the templates to add the posts. List and Single Templates In Hugo, we have three major kinds of templates. There's the home page template that we updated previously. It is used only by the home page. We also have \"single\" templates which are used to generate output for a single content file. We also have \"list\" templates that are used to group multiple pieces of content before generating output. Generally speaking, list templates are named \"list.html\" and single templates are named \"single.html.\" There are three other types of templates: partials, content views, and terms. We will not go into much detail on these. Add Content to the Homepage The home page will contain a list of posts. Let's update its template to add the posts that we just created. The logic in the template will run every time we build the site. $ vi themes/zafta/layouts/index.html <!DOCTYPE html> <html> <body> {{ range first 10 .Data.Pages }} <h1>{{ .Title }}</h1> {{ end }} </body> </html> :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \"{{\" and \"}}\". In our template, the commands are: range .Title end The \"range\" command is an iterator. We're going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created. The \".Title\" command prints the value of the \"title\" variable. Hugo pulls it from the front matter in the Markdown file. The \"end\" command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \"end.\" Everything between the \"range\" and \"end\" is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one. It's helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files. Build the web site and then verify the results. $ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\"tag\":\"tags\", \"category\":\"categories\"} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html <!DOCTYPE html> <html> <body> <h1> second </h1> <h1> first </h1> </body> </html> $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let's take a moment to appreciate what we've done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you've learned everything you need to know to build a theme. All that's really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine. And, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don't worry, though, that's all to come. Add Content to the Posts We're working with posts, which are in the content/post/ directory. That means that their section is \"post\" (and if we don't do something weird, their type is also \"post\"). Hugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can't find one, then it will look in the _default/ directory. There are some twists that we'll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html. Now that we know the search rule, let's see what we actually have available: $ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17 :31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don't know of any other content types, let's start with updating the default. Remember, any content that we haven't created a template for will end up using this template. That can be good or bad. Bad because I know that we're going to be adding different types of content and we're going to end up undoing some of the changes we've made. It's good because we'll be able to see immediate results. It's also good to start here because we can start to build the basic layout for the site. As we add more content types, we'll refactor this file and move logic around. Hugo makes that fairly painless, so we'll accept the cost and proceed. Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you're building a single page application ( SPA ) web site, you can delete all of the other templates and work with just the default single page. That's a refreshing amount of joy right there. Update the Template File $ vi themes/zafta/layouts/_default/single.html <!DOCTYPE html> <html> <head> <title> {{ .Title }} </title> </head> <body> <h1> {{ .Title }} </h1> {{ .Content }} </body> </html> :wq $ Build the web site and verify the results. $ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\"tag\":\"tags\", \"category\":\"categories\"} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html <!DOCTYPE html> <html> <head> <title> first </title> </head> <body> <h1> first </h1> <p> my first post </p> </body> </html> $ cat public/post/second/index.html <!DOCTYPE html> <html> <head> <title> second </title> </head> <body> <h1> second </h1> <p> my second post </p> </body> </html> $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify. Linking to Content The posts are on the home page. Let's add a link from there to the post. Since this is the home page, we'll update its template. $ vi themes/zafta/layouts/index.html <!DOCTYPE html> <html> <body> {{ range first 10 .Data.Pages }} <h1><a href= \" {{ .Permalink }} \" > {{ .Title }} </a></h1> {{ end }} </body> </html> Build the web site and verify the results. $ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\"tag\":\"tags\", \"category\":\"categories\"} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html <!DOCTYPE html> <html> <body> <h1><a href= \"/post/second/\" > second </a></h1> <h1><a href= \"/post/first/\" > first </a></h1> </body> </html> $ Create a Post Listing We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let's make it show a list of all posts (not just the first ten). We need to decide which template to update. This will be a listing, so it should be a list template. Let's take a quick look and see which list templates are available. $ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17 :31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don't have multiple content types, so let's stay consistent and update the default list template. Creating Top Level Pages Let's add an \"about\" page and display it at the top level (as opposed to a sub-level like we did with posts). The default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let's verify that by creating an \"about\" page at the top level: $ vi content/about.md +++ title = \"about\" description = \"about this site\" date = \"2014-09-27\" slug = \"about time\" +++ ## about us i ' m speechless :wq Generate the web site and verify the results. $ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15 :08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15 :08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15 :08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15 :08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15 :08 public/post/second-post/index.html Notice that the page wasn't created at the top level. It was created in a sub-directory named ‘about-time/'. That name came from our slug. Hugo will use the slug to name the generated content. It's a reasonable default, by the way, but we can learn a few things by fighting it for this file. One other thing. Take a look at the home page. $ cat public/index.html <!DOCTYPE html> <html> <body> <h1><a href= \"http://localhost:1313/post/theme/\" > creating a new theme </a></h1> <h1><a href= \"http://localhost:1313/about-time/\" > about </a></h1> <h1><a href= \"http://localhost:1313/post/second-post/\" > second </a></h1> <h1><a href= \"http://localhost:1313/post/first-post/\" > first </a></h1> <script> document.write(' <script src= \"http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\" > < /' + 'script>') </script></body> </html> Notice that the \"about\" link is listed with the posts? That's not desirable, so let's change that first. $ vi themes/zafta/layouts/index.html <!DOCTYPE html> <html> <body> <h1> posts </h1> {{ range first 10 .Data.Pages }} {{ if eq .Type \"post\" }} <h2><a href= \" {{ .Permalink }} \" > {{ .Title }} </a></h2> {{ end }} {{ end }} <h1> pages </h1> {{ range .Data.Pages }} {{ if eq .Type \"page\" }} <h2><a href= \" {{ .Permalink }} \" > {{ .Title }} </a></h2> {{ end }} {{ end }} </body> </html> :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it. But, that about page still renders to about-time/index.html. $ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15 :33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15 :33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15 :33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15 :33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15 :33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let's do it the hard way and change the permalink in the configuration file. $ vi config.toml [ permalinks ] page = \"/:title/\" about = \"/:filename/\" Generate the web site and verify that this didn't work. Hugo lets \"slug\" or \" URL \" override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place. Sharing Templates If you've been following along, you probably noticed that posts have titles in the browser and the home page doesn't. That's because we didn't put the title in the home page's template (layouts/index.html). That's an easy thing to do, but let's look at a different option. We can put the common bits into a shared template that's stored in the themes/zafta/layouts/partials/ directory. Create the Header and Footer Partials In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme's presentation. $ vi themes/zafta/layouts/partials/header.html <!DOCTYPE html> <html> <head> <title> {{ .Title }} </title> </head> <body> :wq $ vi themes/zafta/layouts/partials/footer.html </body> </html> :wq Update the Home Page Template to Use the Partials The most noticeable difference between a template call and a partials call is the lack of path: {{ template \"theme/partials/header.html\" . }} versus {{ partial \"header.html\" . }} Both pass in the context. Let's change the home page template to use these new partials. $ vi themes/zafta/layouts/index.html {{ partial \"header.html\" . }} <h1> posts </h1> {{ range first 10 .Data.Pages }} {{ if eq .Type \"post\" }} <h2><a href= \" {{ .Permalink }} \" > {{ .Title }} </a></h2> {{ end }} {{ end }} <h1> pages </h1> {{ range .Data.Pages }} {{ if or ( eq .Type \"page\" ) ( eq .Type \"about\" ) }} <h2><a href= \" {{ .Permalink }} \" > {{ .Type }} - {{ .Title }} - {{ .RelPermalink }} </a></h2> {{ end }} {{ end }} {{ partial \"footer.html\" . }} :wq Generate the web site and verify the results. The title on the home page is now \"your title here\", which comes from the \"title\" variable in the config.toml file. Update the Default Single Template to Use the Partials $ vi themes/zafta/layouts/_default/single.html {{ partial \"header.html\" . }} <h1> {{ .Title }} </h1> {{ .Content }} {{ partial \"footer.html\" . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file. Add \"Date Published\" to Posts It's common to have posts display the date that they were written or published, so let's add that. The front matter of our posts has a variable named \"date.\" It's usually the date the content was created, but let's pretend that's the value we want to display. Add \"Date Published\" to the Template We'll start by updating the template used to render the posts. The template code will look like: {{ .Date.Format \"Mon, Jan 2, 2006\" }} Posts use the default single template, so we'll change that file. $ vi themes/zafta/layouts/_default/single.html {{ partial \"header.html\" . }} <h1> {{ .Title }} </h1> <h2> {{ .Date.Format \"Mon, Jan 2, 2006\" }} </h2> {{ .Content }} {{ partial \"footer.html\" . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There's a problem, though. The \"about\" page also has the date displayed. As usual, there are a couple of ways to make the date display only on posts. We could do an \"if\" statement like we did on the home page. Another way would be to create a separate template for posts. The \"if\" solution works for sites that have just a couple of content types. It aligns with the principle of \"code for today,\" too. Let's assume, though, that we've made our site so complex that we feel we have to create a new template type. In Hugo-speak, we're going to create a section template. Let's restore the default single template before we forget. $ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \"header.html\" . }} <h1> {{ .Title }} </h1> {{ .Content }} {{ partial \"footer.html\" . }} :wq Now we'll update the post's version of the single template. If you remember Hugo's rules, the template engine will use this version over the default. $ vi themes/zafta/layouts/post/single.html {{ partial \"header.html\" . }} <h1> {{ .Title }} </h1> <h2> {{ .Date.Format \"Mon, Jan 2, 2006\" }} </h2> {{ .Content }} {{ partial \"footer.html\" . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn't. Don't Repeat Yourself DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you're figuring that out, accept that you'll be doing some refactoring. Hugo makes that easy and fast, so it's okay to delay splitting up a template.","tags":"Miscellaneous","url":"https://dvesti.github.io/Pelican/2017/08/31/sozdanie-novoi-temy-english-creating-a-new-theme/","loc":"https://dvesti.github.io/Pelican/2017/08/31/sozdanie-novoi-temy-english-creating-a-new-theme/"},{"title":"Not Convinced?","text":"Thanks for this amazing project. Sebastian Lauwers Let me start by saying your theme is awesome. I would like to use it for my blog. bnice5000 i love the elegant theme 7rack I tried your pelican theme elegant, it's awesome, clean and elegant. 悟道洞穴人 @talham_ yours is the most innovative Pelican theme I've seen yet: http://t.co/worboJFRuX . I love the search feature. — Tshepang Lekhonkhobe (@tshepang_dev) September 29, 2013 @talham_ Thanks for the Elegant theme. It is really elegant :). — Simon Cahuk (@cahuk) October 19, 2013 @talham_ Hi, Elegant is a cool theme. Checking it out. — Fayad Fami (@fayadfami) April 2, 2014 I'm hugely impressed with your work on the theme; thank you for opening the code for it. J L Thank you very much for your reply and for your great Pelican theme !) Alexandr pelican-elegant is the best pelican theme vim xiang as I'm just starting using Pelican, I have to say: great work on the elegant theme. Yanxin I am using the very nice elegant theme for pelican that you wrote. Brian Blais It is really awesome! Jinkun Lin thanks for writing the \"elegant\" theme Jed Brown Hi Talha, thanks to your great theme, I made my homepage better :) I was once trying to make a theme of my own. But never can i make such an awesome one like #Elegant#. liangfu Thanks for your beautiful work! xiaoweiz Awesome work Kevin Ndung'u Nice work! Mohamed Thanks dude, an awesome theme! linuxabc Really cool theme. Calf This theme is fucking awesome. I will start using it =). Thank you Kolmar Kafran Thank you so much for this wonderful pelican theme phdbreak","tags":"101 — Quick Start","url":"https://dvesti.github.io/Pelican/2014/06/01/what-people-say-about-elegant/","loc":"https://dvesti.github.io/Pelican/2014/06/01/what-people-say-about-elegant/"},{"title":"How to set Shortcut Icons","text":"Elegant supports Favicon, Opera Speed Dial, and shortcut or launcher icons on Apple iOS and Android devices. These are disabled by default to avoid unnecessary HTTP requests on sites that do not use them. To enable, set USE_SHORTCUT_ICONS in your configuration USE_SHORTCUT_ICONS = True Place your images in content/theme/images directory, and define STATIC_PATHS variable in your configuration STATIC_PATHS = [ 'theme/images' , 'images' ] Your images should have these names, apple-touch-icon-152x152.png apple-touch-icon-144x144.png apple-touch-icon-120x120.png apple-touch-icon-114x114.png apple-touch-icon-76x76.png apple-touch-icon-72x72.png apple-touch-icon-57x57.png apple-touch-icon.png favicon.ico I highly recommend you to use Iconifier.net to generate the set of images.","tags":"Advanced Features","url":"https://dvesti.github.io/Pelican/2014/04/24/how-to-set-shortcut-icons/","loc":"https://dvesti.github.io/Pelican/2014/04/24/how-to-set-shortcut-icons/"},{"title":"Footer — Add License to your Site","text":"You can optionally define SITE_LICENSE variable in Pelican configuration. It will appear in the footer of the site. For example, SITE_LICENSE = \"\"\"Content licensed under <a rel=\"license nofollow noopener noreferrer\" href=\"http://creativecommons.org/licenses/by/4.0/\" target=\"_blank\"> Creative Commons Attribution 4.0 International License</a>.\"\"\" It appears as","tags":"Components","url":"https://dvesti.github.io/Pelican/2014/04/22/add-license-to-your-site/","loc":"https://dvesti.github.io/Pelican/2014/04/22/add-license-to-your-site/"},{"title":"Footer — Add Site Subtitle","text":"You can optionally define SITE_SUBTITLE variable in Pelican configuration. It will appear in the footer of the site. For example, SITESUBTITLE = \"You can, you should, and if you're brave enough to start, you will.\" It appears in the footer as","tags":"Components","url":"https://dvesti.github.io/Pelican/2014/04/22/add-site-subtitle/","loc":"https://dvesti.github.io/Pelican/2014/04/22/add-site-subtitle/"},{"title":"Web Safe Fonts","text":"Elegant uses commonly available typefaces in every style rule. It has a list of closely matching fonts in the fallback list. For examples Baskerville is the first choice for headings. But if reader does not have Baskerville installed, Garamond will be used. If that too fails then Georgia will be used.","tags":"Components","url":"https://dvesti.github.io/Pelican/2014/04/22/web-safe-fonts/","loc":"https://dvesti.github.io/Pelican/2014/04/22/web-safe-fonts/"},{"title":"Comments — Enable Disqus","text":"You can use Disqus for comments. You have to set DISQUS_SITENAME to Disqus site name identifier in configuration to enable comments. That's it. Elegant will take care of the rest. You can see a working example of Disqus comments in this article. Show Disqus comments by default Just set DISQUS_SITENAME variable. Hide Disqus comments by default Unset DISQUS_SITENAME variable. This is the default setting. Hide Disqus comments by default. Show on Selected Set DISQUS_SITENAME Set DISQUS_FILTER to True This will hide Disqus form on all pages. Now to show Disqus form on selected posts, in article metadata set disqus_filter : off Show Disqus comments by default. Hide on Selected Set DISQUS_SITENAME Remove DISQUS_FILTER or set it to False which is its default value This will hide Disqus form on all pages. Now to hide Disqus form on selected posts, in article metadata set disqus_filter : on","tags":"Connecting With Your Readers","url":"https://dvesti.github.io/Pelican/2014/04/21/enable-disqus-comments/","loc":"https://dvesti.github.io/Pelican/2014/04/21/enable-disqus-comments/"},{"title":"Comments — Invite Visitors To Comment","text":"Instead of just throwing in comments form at the end of every article, Elegant offers you a way to write introductory text that would appear right before comments. Set your message to comments_intro in the article metadata. You may also define COMMENTS_INTRO in Pelican configuration. Write whatever you think is appropriate to invite the visitor to comment. Be creative! You can even put a link to your twitter account or newsletter there. Elegant first looks for comments_intro in article metadata, then for COMMENTS_INTRO in configuration. If it finds neither then no message is displayed.","tags":"Connecting With Your Readers","url":"https://dvesti.github.io/Pelican/2014/04/21/invite-visitors-comment/","loc":"https://dvesti.github.io/Pelican/2014/04/21/invite-visitors-comment/"},{"title":"Displaying a Series Information for Your Multipart Articles","text":"Deprecation The multi-part plugin has been deprecated in favor of the series plugin. For an up-to-date article on using the series plugin, go here . When writing articles about certain topics, it is advantageous to split a single article into multiple articles. Without splitting the article up, the author would be forced to cram all of the content into a denser and much longer article, reducing its effectiveness and readability in the process. Splitting the article allows the author to focus on a specific concept of the larger article, thereby increasing the overall appearance and readability. Elegant provides the ability to present a view of the articles in the series in the middle of the right sidebar. This section starts with the name of the series, followed by one bullet point for each of the articles in the series. The text for the article is prefaced with \"Part N: \" (where N is the index of the article) and then the title for the article. To make navigation easier, the current article is presented in italics, with the other articles being presented as links to their respective articles. Here is an example of what the Series section may look like: Configuration To enable the reading time for your articles, you need to add multi-part to the PLUGINS configuration variable in your Pelican configuration. PLUGINS = [ 'multi-part' ] In addition, the SERIES_TITLE configuration variable can be set to specify the title used for the Series section, regardless of the series. SERIES_TITLE = \"More In This Series\" Article Metadata Once the configuration for Series is enabled in the configuration file, using this feature for a given set of articles requires that the article contains the series metadata field value. The text assigned to the series metadata field is the title of the series. When the page is created, Pelican provides Elegant with a list of all pages that have the same value for the series metadata field. By default, Elegant sorts that list according to the publish date for each article. The titles for those pages is then displayed in sorted order, with the current page presented in italics and the other pages presented as a link to those pages. series : Maximizing Elegant series_index : 2 If there is a reason to override the ordering of the articles, the series_index metadata field is required. It is recommended that you use the part number you want displayed for the article as the value to assign to the field.","tags":"Supported Plugins","url":"https://dvesti.github.io/Pelican/2014/04/20/how-to-use-multi-part-plugin/","loc":"https://dvesti.github.io/Pelican/2014/04/20/how-to-use-multi-part-plugin/"},{"title":"Search Engine and Social Media Optimization","text":"Search Engine Optimization( SEO ) is a moving target which is often misunderstood. Rise of social media has changed the traditional SEO techniques. Changes in search algorithms has made several SEO techniques obsolete. Elegant does its best to leverage all available search and social media tags to give your site higher ranking in search results and optimize it for sharing via social media. Social Media Optimization ( SMO ) Inspired by the post \"What is the New SEO ? Pubcon 2013 Takeaways\" , I looked into the tags that social media sites use. They can be broadly divided into two categories, Open Graph protocol and Twitter Cards . Open Graph protocol Elegant uses following tags, og:url is set to article URL og:type is set to \"article\" og:title is set to article tile and optional subtitle og:site_name is set to SITENAME from your Pelican configuration og:description is set to article summary og:article:author is set to article author og:article:published_time is set to article date og:image is an optional tag. It is set to value of featured_image featured_image should be the complete URL of an image. This image is displayed with the article link on most social sites. Elegant looks for it first in the article metadata, here is metadata for an example reST formatted file. :featured_image: http://oncrashreboot.com/images/article-1-image.jpg Then it looks for FEATURED_IMAGE in Pelican configuration. If it finds neither, og:image is not used. If you want to use og:image tag then make sure you define featured_image in your article metadata. You should also define FEATURED_IMAGE in your Pelican configuration to be used as a generic image in case an article does not have featured_image defined. Twitter Cards Elegant uses following tags, twitter:card is set to \"summary\" twitter:title is set to article title and optional subtitle twitter:creator is set to TWITTER_USERNAME if defined in Pelican configuration twitter:description is set to article summary twitter:image is set to featured_image . The featured_image discussion above is also applicable in this case Please note you need to be approved by Twitter before you can start using Twitter Cards. Search Engine Optimization ( SEO ) Elegant puts tags and category of your article in keywords tag <meta name=\"keywords\" . You can add your own keywords by defining keywords in article metadata. SITE_DESCRIPTION and article summary is used in description tag <meta name=\"description\" . Your AUTHOR name is used in copyright tag <meta name=\"copyright\" .","tags":"Analytics, SEO and SMO","url":"https://dvesti.github.io/Pelican/2014/04/20/search-engine-and-social-media-optimization/","loc":"https://dvesti.github.io/Pelican/2014/04/20/search-engine-and-social-media-optimization/"},{"title":"How does modified metadata works","text":"You need to update your articles time and again. Sometimes it makes sense to display the date when you updated the article. Pelican release v3.4.0 has a new metadata field modified . Type of its value is datetime . You can show the last updated date of the article by defining modified in your article metadata. This is how it is displayed in the side bar, Depending on your DATE_FORMATS setting you can put modified date in your reST formatted file as :modified: 2014-01-22 14:30 Elegant will process it and display the last updated as \"Jan 22, 2014\". Condition to Display Last Updated Last Updated is only displayed if the difference between article.modifed and article.date is more than or equal to a day. This means if you modify and article the same day you add it, then Last Updated will not be displayed. Tip You may want to enable filetime_from_git Pelican plugin to auto fill the modified field for your Git commit history. Deprecated Warning: Legacy Variable Pelican versions prior to 3.4 does not have modified metadata in which case type of its value is string. If you are using old version of Pelican, i.e 3.3 or less, make sure you assign it a value exactly the way you want it to appear. Whatever you type, it will appear as it is. Taking the example from above, metadata in your reST formatted file should be, :modified: Jan 22, 2014 You can also assign raw HTML to it. For example, :modified: < a href = \"https://github.com/talha131/onCrashReboot/\" title = \"Revision History\" > Aug 29, 2013 </ a > But I do not recommend it because it will break on newer versions of Pelican. In fact, you should ditch Pelican 3.3 or less and move to a higher version if you require modified metadata.","tags":"Advanced Features","url":"https://dvesti.github.io/Pelican/2014/04/19/how-does-modified-metadata-works/","loc":"https://dvesti.github.io/Pelican/2014/04/19/how-does-modified-metadata-works/"},{"title":"Add Social Sharing Links","text":"No blog is complete without buttons or links that invites a reader to share your articles with the friend and colleagues on various social media sites. The problem with these buttons on many sites is that the buttons are used by big companies to track your web usage, sharing that information with various companies. (For a more in-depth talk on this subject, please read the Online Trackers and Links section at the end of this page.) Elegant provides a simple solution to this, using the Share Post plugin from pelican to provide simple and plain old-school URLs to provide the social media links. These have the benefit of not having any ability to be used for online tracking. Here is an example of what the Social Media Sharing section may look like: Configuration To enable the Social Media Sharing links for your articles, add share_post to the PLUGINS configuration variable in your Pelican configuration. PLUGINS = [ 'share_post' ] Optionally, customize the list of networks where the article can be shared using SHARE_LINKS . SHARE_LINKS = [ ( 'twitter' , 'Twitter' ), ( 'facebook' , 'Facebook' ), ( 'email' , 'Email' ) ] The first item in each pair refers to a network recognized by share_post . Currently the list of supported networks includes twitter , facebook , email , hacker-news , linkedin and reddit . The second item in each pair is the text displayed for the link on the page. The sharing links are displayed in the order of SHARE_LINKS , therefore this variable can also be used to customize the link order. Note The share_post plugin requires the Python beautifulsoup4 package to be installed. The default text used to lead into the Social Media Sharing links is \"Share On:\". This can be overridden by defining the SHARE_POST_INTRO configuration variable with the text you want to replace it. SHARE_POST_INTRO = \"Share me with your friends on\" Article Metadata Once the configuration for Sharing Media Links is enabled in the configuration file, using this feature to provide links for your readers to share your articles on social media is completed. The only effect any metadata field will have on Sharing Media links is to change the text to lead into the Social Media Sharing links. As documented above, the SHARE_POST_INTRO can be used to provide an alternate lead in text for the Social Media Sharing links. This text can be further overridden on an article-by-article basis by specifying the share_post_intro metadata field value for an article as follows: share_post_intro : Share this article on Elegant with Online Trackers and Links There are a plethora of social sharing widgets available online. The unfortunate problem with most of the widgets is that they are used to track users and their browsing habits. Technology watchdogs have been raising a hue and cry since as early as 2009 . Developers have responded to these concerned by coming up with different ways to cope with this issue. The solutions range from custom browser plugins to completely totally reinventing share widgets for a given browser. However, it is unreasonable to expect that each of your visitors uses a privacy plugin. Depending on your setup, your computer's browser or mobile phone's browser may not let your users install any kind of plugin. Reinventing a social widget that respects the user's concerns will certainly requiring the more educated readers about it. For other readers, the \"new\" or \"changed\" social widget will seem alien to them, and will make them hesitant to use it. In turn, that will almost definitely result in a decrease in the number of shares of your articles on social networks. Pelican (and therefore Elegant) uses a simple approach to work around this issue. By using plain URLs to provide it's ability to share with social media sites, the entire widget issue is avoided.","tags":"Supported Plugins","url":"https://dvesti.github.io/Pelican/2014/03/24/how-to-use-social-sharing-plugin/","loc":"https://dvesti.github.io/Pelican/2014/03/24/how-to-use-social-sharing-plugin/"},{"title":"How To Improve the Download Time For Your Pages","text":"When a webpage is created, webpage authors and static page generators will often grab low-level asset files from a trusted location. Between Pelican and Elegant, these files will often number between 8 and 15 CSS or JavaScript files. While these files are essential to the proper look and feel of a properly designed website, the overhead of this content being in separate files is that separate requests are made for each of them to the server. Important Elegant comes with a compressed and concatenated CSS stylesheet , so that only one request is made to fetch the CSS stylesheets. Following instruction is redundant for most users. But if you have decided to customize the theme using custom.css then follow these instruction. Pelican provides a plugin that takes the various CSS and JavaScript files and compiles each group of them into a single file. Not only does this process reduce the number of calls to retrieve files from the server, but it minifies or reduces the overall size of those files as well. Configuration To enable Asset Management for your website, add assets to the PLUGINS configuration variable in your Pelican configuration. PLUGINS = [ 'assets' ] Note The assets plugin requires the Python webassets and cssmin packages to be installed.","tags":"Supported Plugins","url":"https://dvesti.github.io/Pelican/2014/03/24/avoid-unnecessary-http-requests/","loc":"https://dvesti.github.io/Pelican/2014/03/24/avoid-unnecessary-http-requests/"},{"title":"How to Customize Elegant","text":"You can change Elegant's look, color palette, font, size, and even labels used for widgets, sections and plugins. Elegant is best maintained when you treat it as a separate resource in your project. Do not edit template files, JavaScript code and style sheets. This practice will make upgrading Elegant fuss free process. Instead see the guides in \"Extra Customization\" category .","tags":"Advanced Features","url":"https://dvesti.github.io/Pelican/2014/03/24/how-to-customize-elegant/","loc":"https://dvesti.github.io/Pelican/2014/03/24/how-to-customize-elegant/"},{"title":"Add A Table Of Contents to Your Articles","text":"The key concept driving Elegant's design is to provide a reading experience that is clean with minimal distractions. From that point of view, providing a table of contents does not provide any additional information, but only exists to help guide the reader through the article. Therefore, Elegant places the table of contents on the left side of the page with a relatively smaller font. This enables the table to guide the reader without grabbing the focus of the reader and distracting them. Plugin Configuration Enabling the Elegant' display of the table of contents is a two-step process. In the first step, use the markup languages to provide table of contents. Second step is to take the generated table of contents and display it on the left side of the article. If both steps are not completed, the table of contents will not be displayed on the left side of the article. For the second step, you need to enable the extract_toc plugin in your pelican configuration. PLUGINS = [ 'extract_toc' ] Configuring Markdown You need to enable the toc extension for Markdown in your Pelican configuration. MARKDOWN = { 'extension_configs' : { 'markdown.extensions.toc' : {} } } Now to generate a table of contents for you article, add the [TOC] markdown tag to your document. Title : My sample title Date : 2014 - 12 - 03 Category : Examples [ TOC ] ## This is my first heading This is the content of my sample blog post . ## This my second heading I will end my example here . Other Options For other options available for the Markdown Table of Contents extension, refer to the Python - Markdown - Table of Contents page. Debugging Verify that your Markdown file has [TOC] tag Verify that the MARKDOWN configuration variable is set properly. Verify that the PLUGINS configuration variable is set properly. Configuring reStructuredText Format reStructuredText format has the contents directive that generates a table of contents in the article. To generate a table of contents for you article, add the .. contents:: directive to your document. My sample title ############### :date: 2014-12-03 :category: Examples .. contents :: This is my first heading ======================== This is the content of my sample blog post. This my second heading ====================== I will end my example here. Hide Default Title Text Possibly Deprecated We couldn't not reproduce this issue in our testing. This should be considered deprecated, but is retained in this document in case someone encounters this. Using the default configuration, reStructuredText will generate a default title for the table of contents. According to the official documentation , Language-dependent boilerplate text will be used for the title. The English default title text is \"Contents\". This default configuration creates two titles for your table of contents, one generated by reStructuredText and the other by Elegant. To disable default title generation 1 , you need to add following rule in your custom.css file to hide the duplicate title: div # contents p . topic-title . first { display : none ; } There is no straightforward way to disable default title generation in reStructuredText. ↩","tags":"Components","url":"https://dvesti.github.io/Pelican/2014/03/18/how-elegant-displays-table-of-contents/","loc":"https://dvesti.github.io/Pelican/2014/03/18/how-elegant-displays-table-of-contents/"},{"title":"How to show RSS feeds icon","text":"RSS feeds is the oldest and arguably the most used format to publish blog updates. Its use is not limited to RSS aggregators and readers. Tools like IFTTT and Calibre increases RSS feeds' power and versatility by manifolds. To enable RSS feeds, see Feed Settings in Pelican documentation. Links to RSS feeds are embedded in every page. Links to category and tag feeds are embedded only in the Categories and Tags pages respectively. Elegant does not show RSS feeds icon out of the box, though it can be easily enabled. All RSS consumers have the ability to capture feed links from a web address. For example, you need not put http://oncrashreboot.com/feeds/all.atom.xml in your RSS reader. Just http://oncrashreboot.com is enough. Your reader should be able to extract feed URL from the link. All popular browsers can detect RSS feeds on the page and show a visual cue. In Firefox, you can add \"Subscribe\" button to the toolbar . For Chrome, you can use RSS Subscription Extension . Here is an example of my category feeds in Chrome. These options make it redundant to have a separate RSS icon on the page. Elegant is all about a clean and minimal UI . But it is not so hard to enable it. First configure the Social widget . Then add a tuple for RSS , SOCIAL = (( 'RSS' , 'http://oncrashreboot.com/feeds/all.atom.xml' ),) Viola! You got yourself the RSS icon.","tags":"Connecting With Your Readers","url":"https://dvesti.github.io/Pelican/2014/03/17/how-to-show-rss-feeds-icon/","loc":"https://dvesti.github.io/Pelican/2014/03/17/how-to-show-rss-feeds-icon/"},{"title":"How to display your Social Media Profiles","text":"Bloggers use different tools to connect with their readers, engage in discussion with them, and create a loyal following of fans. These tools range from fully blown social web apps like twitter to old school RSS feeds. Bloggers add a social media widget to their blog which has links to all their social media profiles; inviting readers to engage with them else where on the web too. Most social widgets are loud and obtrusive. Their colors and placement takes away readers' attention from the actual content. Elegant understands the importance of readers engagement but it makes sure not to push author's \"online social karma\" down readers' throats. Elegant displays the widget in the sidebar. Each icon is a link to a social media profile with an appropriate title attribute. Icons use muted color which changes when user hovers over them. Elegant uses scalable vector icons from Font Awesome . You can instantly customize the icons by tweaking the CSS . This customization can range from changing size and color to adding drop shadow. How to configure the widget Define SOCIAL in your pelicanconf.py . SOCIAL is list of tuple. Each tuple has two items, title and URL . SOCIAL = (( 'Twitter' , 'http://twitter.com/talham_' ), ( 'Github' , 'http://github.com/talha131' )) In this example, SOCIAL has two tuples. First tuple is ('Twitter', 'http://twitter.com/talham_') . First element of the tuple is the title Twitter and second element is the URL . Elegant picks icons from Font Awesome. Title of the tuple, for example Twitter , is used to decide the icon of the social media profile. Twitter will use fa-twitter CSS class, Github will use fa-github , and Facebook will use fa-facebook . You can see all the icons and their corresponding CSS classes in Font Awesome documentation . How to customize the icon What if the icon of your social media site is not available in Font Awesome? What if the CSS class name does not follow fa-<title> convention, for example Stack Exchange is different from fa-stack-exchange ? What if you want to use fa-youtube-play in place of fa-youtube for your YouTube profile? The solution is to add a third element to the tuple. CSS class name. SOCIAL = (( 'Twitter' , 'http://twitter.com/talham_' , 'twitter-square' ), ( 'Youtube' , 'http://example.com' , 'youtube-play' )) This third element is optional. It should be equal to the Font Awesome CSS class that you want to use for the social profile, minus the fa part from the CSS class name. How to customize Social Profile Label By default, Elegant labels social profile section as Contact . You can change this label by defining a new variable SOCIAL_PROFILE_LABEL in your pelicanconf.py file. SOCIAL_PROFILE_LABEL = u 'Stay in Touch'","tags":"Connecting With Your Readers","url":"https://dvesti.github.io/Pelican/2014/01/27/how-to-display-your-social-media-profiles-deprecated/","loc":"https://dvesti.github.io/Pelican/2014/01/27/how-to-display-your-social-media-profiles-deprecated/"},{"title":"Add Previous and Next Article Links","text":"When reading a series of articles on a website, a reader often desires to view the articles in chronological order by publish date. Elegant provides the ability to provide navigation links to the previous and next articles at the bottom of each article. These links provide a powerful way to keep visitors engaged and guide them through your site. Here is an example of what the Previous and Next Articles section may look like: Configuration To enable the Previous and Next Article links for your articles, add neighbors to the PLUGINS configuration variable in your Pelican configuration. PLUGINS = [ 'neighbors' ] When enabled, Elegant will show the links for Previous and Next articles at the very bottom of every article, after any footnotes for the article, but before the footer for the website. The link for the next oldest or Previous article is displayed on the left side and the next youngest or Next article on the right side, being consistent with most languages being Left-to-Right language. If there is no article that is newer or older than the current article, the respective link will not be shown.","tags":"Supported Plugins","url":"https://dvesti.github.io/Pelican/2014/01/27/how-to-show-previous-and-next-article/","loc":"https://dvesti.github.io/Pelican/2014/01/27/how-to-show-previous-and-next-article/"},{"title":"How to use Google Analytics","text":"Elegant supports the popular web tracking service, Google Analytics . Get your property ID from your Google Analytics account. It has this format UA-XXXXX-X . Set GOOGLE_ANALYTICS variable to it in your configuration. GOOGLE_ANALYTICS = u 'UA-00000000-1' That's it. Elegant will take care of the rest.","tags":"Analytics, SEO and SMO","url":"https://dvesti.github.io/Pelican/2013/11/11/how-to-use-google-analytics/","loc":"https://dvesti.github.io/Pelican/2013/11/11/how-to-use-google-analytics/"},{"title":"How to use StatCounter","text":"Elegant has support for popular web tracking service, StatCounter . You need two codes from StatCounter - project ID and security code. Create a project inside StatCounter. Click on Config , Reinstall Code and then Default Guide . It will show you a standard code that a website must have in order to use StatCounter. <!-- Start of StatCounter Code for Default Guide --> < script > var sc_project = 5555555 ; var sc_invisible = 1 ; var sc_security = \"XXXXXXXX\" ; ... <!-- End of StatCounter Code for Default Guide --> Assign sc_project value to STAT_COUNTER_PROJECT and sc_security to STAT_COUNTER_SECURITY . STAT_COUNTER_PROJECT = 5555555 STAT_COUNTER_SECURITY = u 'XXXXXXXX' That's it. Elegant will take care of the rest.","tags":"Analytics, SEO and SMO","url":"https://dvesti.github.io/Pelican/2013/11/11/how-to-use-statcounter-analytics/","loc":"https://dvesti.github.io/Pelican/2013/11/11/how-to-use-statcounter-analytics/"},{"title":"Code Snippets — Display Line Numbers","text":"reStructuredText and Markdown have directives that generate line numbers for code snippets. Install Pygments to use these directives. Following examples will generate this output, 1 2 def example (): print 'Hello World' reStructuredText reStructuredText has code-block directive to insert code snippets in your markup. Use linenos flag to switch on line numbers for the snippet. .. code-block :: python :linenos: def example(): print 'Hello World' Markdown Python-Markdown uses CodeHilite extension for syntax highlighting. Setup CodeHilite , then use Shebang #! to generate line numbers. #!python def example (): print 'Hello World'","tags":"Components","url":"https://dvesti.github.io/Pelican/2013/11/05/display-line-numbers-in-code-snippets/","loc":"https://dvesti.github.io/Pelican/2013/11/05/display-line-numbers-in-code-snippets/"},{"title":"Newsletter — Add Mailchimp","text":"Elegant shows a form to subscribe to your newsletter, above the fold, in the right section of every article. Increased visibility is said to increase number of subscribers. You need to put your Mailchimp form action URL in MAILCHIMP_FORM_ACTION in your configuration file. To customize user experience you can also define, EMAIL_SUBSCRIPTION_LABEL , EMAIL_FIELD_PLACEHOLDER and SUBSCRIBE_BUTTON_TITLE You can see Mailchimp Form in action in the sidebar. It's a working example. Enter your email address so that we can send you news of new Elegant releases in your inbox. Show Mailchimp Form by default Just set MAILCHIMP_FORM_ACTION variable. Hide Mailchimp Form by default Unset MAILCHIMP_FORM_ACTION variable. This is the default setting. Hide Mailchimp Form by default. Show on Selected Set MAILCHIMP_FORM_ACTION Set MAILCHIMP_FILTER to True This will hide Mailchimp form on all pages. Now to show Mailchimp form on selected posts, in article metadata set mailchimp_filter : off Show Mailchimp Form by default. Hide on Selected Set MAILCHIMP_FORM_ACTION Remove MAILCHIMP_FILTER or set it to False which is its default value This will hide Mailchimp form on all pages. Now to hide Mailchimp form on selected posts, in article metadata set mailchimp_filter : on","tags":"Connecting With Your Readers","url":"https://dvesti.github.io/Pelican/2013/08/27/add-mailchimp/","loc":"https://dvesti.github.io/Pelican/2013/08/27/add-mailchimp/"},{"title":"Article Subtitle","text":"Pelican lets you define title of your article in the metadata. Elegant adds subtitle support. Just define subtitle in your article's metadata and it will appear along with your title. Here is an example, Article subtitle is displayed with the title in every list. To keep it visibly separate from title, subtitle is enclosed in <small> tag. When visible cue cannot be used, like in the title attribute of HTML anchor tag <a> , a hyphen is inserted between them.","tags":"Components","url":"https://dvesti.github.io/Pelican/2013/08/27/article-subtitle/","loc":"https://dvesti.github.io/Pelican/2013/08/27/article-subtitle/"},{"title":"Articles Count With Every Tag and Category","text":"Readers of an article on your site usually look for other articles on the same topic. Categories and tags are a way of showing them related articles. Elegant displays the count of articles that you have written in a category or tag in a non-intrusive manner. Every category and tag has the count of articles in superscript. So if you have written three articles in the C++ category or tag, it will have 3 in the superscript. This way visitor will know you have written other articles too on the same topic. Check out the screenshots,","tags":"Components","url":"https://dvesti.github.io/Pelican/2013/08/27/articles-count-with-every-tag-and-category/","loc":"https://dvesti.github.io/Pelican/2013/08/27/articles-count-with-every-tag-and-category/"},{"title":"Code Snippets — Theme","text":"Elegant uses Pygment port of Gruvbox theme for syntax highlighting. 1 2 3 4 int sample_function ( void ) { printf ( \"This is a sample function\" ); return 0 } HTML Example < div class = \"elegant-gallery\" itemscope itemtype = \"http://schema.org/ImageGallery\" > < figure itemprop = \"associatedMedia\" itemscope itemtype = \"http://schema.org/ImageObject\" > < a href = \"https://i.picsum.photos/id/1019/5472/3648.jpg\" itemprop = \"contentUrl\" data-size = \"5472x3648\" > < img src = \"https://i.picsum.photos/id/1019/100/100.jpg\" itemprop = \"thumbnail\" alt = \"Image description\" /> </ a > < figcaption itemprop = \"caption description\" > Placeholder image from Unsplash </ figcaption > </ figure > < figure itemprop = \"associatedMedia\" itemscope itemtype = \"http://schema.org/ImageObject\" > < a href = \"https://i.picsum.photos/id/101/2621/1747.jpg\" itemprop = \"contentUrl\" data-size = \"2621x1747\" > < img src = \"https://i.picsum.photos/id/101/100/100.jpg\" itemprop = \"thumbnail\" alt = \"Image description\" /> </ a > < figcaption itemprop = \"caption description\" > You can write anything in the caption </ figcaption > </ figure > </ div > C++ example #include <algorithm> #include <iostream> #include <vector> int main () { std :: vector < int > eg = { 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 , 89 , 144 , 233 , 377 , 610 }; eg . erase ( std :: remove_if ( eg . begin (), eg . end (), []( int x ) { return x > 99 ; }), eg . end ()); // Print result std :: for_each ( eg . begin (), eg . end (), []( const int & e ) { std :: cout << e << \" \" ; }); }","tags":"Components","url":"https://dvesti.github.io/Pelican/2013/08/27/code-snippets-theme/","loc":"https://dvesti.github.io/Pelican/2013/08/27/code-snippets-theme/"},{"title":"Comments — Collapse Comments Section","text":"Readers use scroll bar to track their progress when reading inside their browsers. Very often comments take up more space than the actual article. When comments take up more space, it throws the scroll bar proportion off and reader cannot judge his progress correctly. Hacker News hosted a discussion on this topic. tons of online articles list comments on the same page, so the scroll bar is almost a negative incentive to keep reading. \"I've read this much of the article and I'm only 1/20th of the way down?\" [user stops reading, unaware that there's 450 comments and the article is actually pretty short] Elegant keeps the comments section hidden by default. Reader can hide and unhide the section by clicking on the comments section. This is how comments section appear It expands when reader clicks on it","tags":"Connecting With Your Readers","url":"https://dvesti.github.io/Pelican/2013/08/27/collapsible-comments/","loc":"https://dvesti.github.io/Pelican/2013/08/27/collapsible-comments/"},{"title":"Live Filter for Tags","text":"Elegant is a minimal theme. Instead of creating separate pages for each tag, Elegant shows all the tags on a single page. To help visitor find the tags he is interested in, Elegant offers live filter. Go to tags page and type your required tag in \"Find a tag\" search box. Elegant will automatically filter the list. For example, this is how my tags page looks like As soon as I type \"os\", all other tags are filtered out With live filter, your reader will have no difficulty in picking up his desired tag from the list, even if your site has hundreds of tags.","tags":"Components","url":"https://dvesti.github.io/Pelican/2013/08/27/live-filter-for-tags/","loc":"https://dvesti.github.io/Pelican/2013/08/27/live-filter-for-tags/"},{"title":"Page Title","text":"Elegant follows following format for the <title> tag Article title · Site Name Some sites put site title first and article title later in the <title> tag. There is a problem with this approach. When you open too many tabs, browser delimits tab's title from the end. In such cases, only the first few words or even letters of the <title> are left visible. If visitor has opened several tabs from your website, all tabs will have \"Site Name…\" title. User will need to click on each tab to identify his required tab from the content. But with Elegant's approach article title will always be visible, and reader will have less difficultly in identifying the tab he is after. Putting site title before the article title increases your site name visibility. Elegant achieves this by putting site name in the top navigation bar of every page, where it always stays above the fold.","tags":"Components","url":"https://dvesti.github.io/Pelican/2013/08/27/page-title/","loc":"https://dvesti.github.io/Pelican/2013/08/27/page-title/"},{"title":"Zero Clutter Categories","text":"Pelican by default creates a separate page for each category. Themes list all the articles filed in that category at its page. Elegant takes a different approach which is, \"all Categories but with zero clutter\". It lists all the categories and their articles on the same page. To reduce clutter and utilize space efficiently, each category and its list of articles is enclosed in collapsible accordions . Here is how categories appear collapsed And this is how they appear uncollapsed Did you notice that categories are listed in ascending alphabetical order and articles are sorted by their date in descending order?","tags":"Components","url":"https://dvesti.github.io/Pelican/2013/08/27/zero-clutter-categories/","loc":"https://dvesti.github.io/Pelican/2013/08/27/zero-clutter-categories/"},{"title":"Мой первый Обзор — My First Review","text":"Following is a review of my favorite mechanical keyboard. Будет оборзевать…","tags":"Blog","url":"https://dvesti.github.io/Pelican/2010/12/03/moi-pervyi-obzor-my-first-review/","loc":"https://dvesti.github.io/Pelican/2010/12/03/moi-pervyi-obzor-my-first-review/"},{"title":"Моё первое Сообщение — My First Post","text":"This is the content of my super blog post. fmt . Println ( \"Hello Clipboard\" ) поменял на яваскрипт подсветку 2020-06-01 15-35 тест от 09-06-2020 19-35","tags":"Blog","url":"https://dvesti.github.io/Pelican/2010/12/03/my-first-post/","loc":"https://dvesti.github.io/Pelican/2010/12/03/my-first-post/"},{"title":"Мой супер пост — My super post","text":"В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя. This is the content of my super blog post. Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн. Его популяризации в новое время послужили публикация листов Letraset с образцами Lorem Ipsum в 60-х годах и, в более недавнее время, программы электронной вёрстки типа Aldus PageMaker, в шаблонах которых используется Lorem Ipsum. Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн. Его популяризации в новое время послужили публикация листов Letraset с образцами Lorem Ipsum в 60-х годах и, в более недавнее время, программы электронной вёрстки типа Aldus PageMaker, в шаблонах которых используется Lorem Ipsum. Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн. Его популяризации в новое время послужили публикация листов Letraset с образцами Lorem Ipsum в 60-х годах и, в более недавнее время, программы электронной вёрстки типа Aldus PageMaker, в шаблонах которых используется Lorem Ipsum. Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн. Его популяризации в новое время послужили публикация листов Letraset с образцами Lorem Ipsum в 60-х годах и, в более недавнее время, программы электронной вёрстки типа Aldus PageMaker, в шаблонах которых используется Lorem Ipsum.","tags":"Blog","url":"https://dvesti.github.io/Pelican/2010/12/03/my-super-post/","loc":"https://dvesti.github.io/Pelican/2010/12/03/my-super-post/"}]}